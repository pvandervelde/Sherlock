<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Build flags -->
        <ShouldClean>true</ShouldClean>
        <ShouldCleanPackages>false</ShouldCleanPackages>
        
        <!-- Directories -->
        <DirWorkspace>$(MSBuildProjectDirectory)</DirWorkspace>
        <DirPackages>$(DirWorkspace)\packages</DirPackages>
        <DirTools>$(DirWorkspace)\tools</DirTools>
        <DirBuild>$(DirWorkspace)\build</DirBuild>
        <DirBuildBin>$(DirBuild)\bin\$(PlatformTranslated)\$(Configuration)</DirBuildBin>
        <DirBuildDeploy>$(DirBuild)\deploy</DirBuildDeploy>
        <DirBuildLogs>$(DirBuild)\logs</DirBuildLogs>
        <DirBuildTemp>$(DirBuild)\temp</DirBuildTemp>
        <DirSrc>$(DirWorkspace)\src</DirSrc>
        
        <!-- Issue tracker -->
        <GitHubUserName></GitHubUserName>
        <GitHubToken></GitHubToken>
        
        <!-- Version number -->
        <VersionSemantic>0</VersionSemantic>
       
        <!-- Tools -->
        <MsBuildExtensionsPath>$(DirTools)\msbuild.extensions</MsBuildExtensionsPath>
        
        <!-- Jenkins, the build system, adds the BZR_REVISION environment variable so we can get that here -->
        <BZR_REVISION Condition="'$(BZR_REVISION)' == '' ">-1</BZR_REVISION>
        <ScmRevision>$(BZR_REVISION)</ScmRevision>
    </PropertyGroup>
    
    <Import Project="$(MsBuildExtensionsPath)\FindToolFromPackages.msbuild" 
            Condition="Exists('$(MsBuildExtensionsPath)\FindToolFromPackages.msbuild')" />
    <Import Project="$(MsBuildExtensionsPath)\GetSemanticVersion.msbuild" 
            Condition="Exists('$(MsBuildExtensionsPath)\GetSemanticVersion.msbuild')" />
    <Import Project="$(MsBuildExtensionsPath)\TemplateFile.msbuild"
            Condition="Exists('$(MsBuildExtensionsPath)\TemplateFile.msbuild')"/>

    <Target Name="Run" DependsOnTargets="_DisplayInfo;_GatherReleaseNotes">
        <!-- Do nothing here -->
    </Target>
    
    <!-- Display info -->
    <Target Name="_DisplayInfo">
        <Message Text="Gathering release notes ..." />
        <Message Text="WARNING: Github username not specified" Condition=" '$(GitHubUserName)' == '' " />
        <Message Text="WARNING: Github token not specified" Condition=" '$(GitHubToken)' == '' " />
    </Target>
    
    <PropertyGroup>
        <FileGitVersionExe>GitHubFlowVersion.exe</FileGitVersionExe>
    </PropertyGroup>
    <Target Name="_GetSemanticVersion">
        <FindToolFromPackages PackagesDir="$(DirPackages)" FileToLocate="$(FileGitVersionExe)">
            <Output TaskParameter="Path" PropertyName="PathGitVersionExe" />
        </FindToolFromPackages>
        
        <GetSemanticVersion ExePath="$(PathGitVersionExe)" TempDirectory="$(DirBuildTemp)">
            <Output TaskParameter="VersionSemantic" PropertyName="VersionSemantic" />
        </GetSemanticVersion>
    </Target>
    
    <PropertyGroup>
        <FileGitReleaseNotes>GitReleaseNotes.exe</FileGitReleaseNotes>
        <FileReleaseNotesShort>$(DirBuildTemp)\releasenotes_short.md</FileReleaseNotesShort>
        <FileReleaseNotesFull>$(DirBuildTemp)\releasenotes_full.md</FileReleaseNotesFull>
    </PropertyGroup>
    <Target Name="_GatherReleaseNotes" DependsOnTargets="_DisplayInfo;_GetSemanticVersion" Condition=" '$(GitHubUserName)' != '' AND '$(GitHubToken)' != '' ">
        <FindToolFromPackages PackagesDir="$(DirPackages)" FileToLocate="$(FileGitReleaseNotes)">
            <Output TaskParameter="Path" PropertyName="PathGitReleaseNotesExe" />
        </FindToolFromPackages>
        
        <Exec Command="&quot;$(PathGitReleaseNotesExe)&quot; /I GitHub /R $(GitHubUserName)/sherlock /U $(GitHubUserName) /T $(GitHubToken) /V $(VersionSemantic) /O &quot;$(FileReleaseNotesShort)&quot;"
              WorkingDirectory="$(DirWorkspace)" />
        
        <Exec Command="&quot;$(PathGitReleaseNotesExe)&quot; /I GitHub /R $(GitHubUserName)/sherlock /U $(GitHubUserName) /T $(GitHubToken) /F all /V $(VersionSemantic) /O &quot;$(FileReleaseNotesFull)&quot;"
              WorkingDirectory="$(DirWorkspace)" />
    </Target>
 </Project>