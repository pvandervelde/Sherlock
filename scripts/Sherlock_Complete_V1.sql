/*
Deployment script for Sherlock

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
USE [Sherlock];


GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;
GO

IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL READ COMMITTED
GO
BEGIN TRANSACTION
GO
PRINT N'Creating [Environments]...';


GO
CREATE SCHEMA [Environments]
    AUTHORIZATION [dbo];


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests]...';


GO
CREATE SCHEMA [Tests]
    AUTHORIZATION [dbo];


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Versioning]...';


GO
CREATE SCHEMA [Versioning]
    AUTHORIZATION [dbo];


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[Application]...';


GO
CREATE TABLE [Environments].[Application] (
    [pk_ApplicationId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]             NVARCHAR (50) NOT NULL,
    [VersionMajor]     INT           NOT NULL,
    [VersionMinor]     INT           NOT NULL,
    [VersionPatch]     INT           NOT NULL,
    [VersionBuild]     INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([pk_ApplicationId] ASC),
    CONSTRAINT [CK_Application_Unique] UNIQUE NONCLUSTERED ([Name] ASC, [VersionMajor] ASC, [VersionMinor] ASC, [VersionPatch] ASC, [VersionBuild] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[MachineApplication]...';


GO
CREATE TABLE [Environments].[MachineApplication] (
    [pk_MachineApplicationId] INT           IDENTITY (1, 1) NOT NULL,
    [fk_MachineId]            NVARCHAR (50) NOT NULL,
    [fk_ApplicationId]        INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([pk_MachineApplicationId] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[Machine]...';


GO
CREATE TABLE [Environments].[Machine] (
    [pk_MachineId]          NVARCHAR (50)  NOT NULL,
    [Name]                  NVARCHAR (50)  NOT NULL,
    [Description]           NVARCHAR (MAX) NOT NULL,
    [NetworkName]           NVARCHAR (50)  NOT NULL,
    [MacAddress]            NVARCHAR (50)  NOT NULL,
    [IsAvailableForTesting] BIT            NOT NULL,
    [IsActive]              BIT            NOT NULL,
    [fk_OperatingSystem]    INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([pk_MachineId] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[HypervMachine]...';


GO
CREATE TABLE [Environments].[HypervMachine] (
    [pk_HypervMachineId] NVARCHAR (50)  NOT NULL,
    [Image]              NVARCHAR (50)  NOT NULL,
    [SnapshotToReturnTo] NVARCHAR (MAX) NOT NULL,
    [fk_HostId]          NVARCHAR (50)  NOT NULL,
    PRIMARY KEY CLUSTERED ([pk_HypervMachineId] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[PhysicalMachine]...';


GO
CREATE TABLE [Environments].[PhysicalMachine] (
    [pk_PhysicalMachineId] NVARCHAR (50) NOT NULL,
    [CanStartRemotely]     BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([pk_PhysicalMachineId] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[OperatingSystem]...';


GO
CREATE TABLE [Environments].[OperatingSystem] (
    [pk_OperatingSystemId]    INT           IDENTITY (1, 1) NOT NULL,
    [Name]                    NVARCHAR (50) NOT NULL,
    [ServicePack]             NVARCHAR (50) NULL,
    [ArchitecturePointerSize] INT           NOT NULL,
    [Culture]                 NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([pk_OperatingSystemId] ASC),
    CONSTRAINT [CK_OperatingSystem_Unique] UNIQUE NONCLUSTERED ([Name] ASC, [ServicePack] ASC, [ArchitecturePointerSize] ASC, [Culture] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[ScriptExecuteTestStep]...';


GO
CREATE TABLE [Tests].[ScriptExecuteTestStep] (
    [pk_ScriptExecuteTestStepId] INT           NOT NULL,
    [Language]                   NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([pk_ScriptExecuteTestStepId] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[MsiInstallTestStep]...';


GO
CREATE TABLE [Tests].[MsiInstallTestStep] (
    [pk_MsiInstallTestStepId] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([pk_MsiInstallTestStepId] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[TestStep]...';


GO
CREATE TABLE [Tests].[TestStep] (
    [pk_TestStepId]        INT IDENTITY (1, 1) NOT NULL,
    [fk_TestEnvironmentId] INT NOT NULL,
    [Order]                INT NOT NULL,
    PRIMARY KEY CLUSTERED ([pk_TestStepId] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[TestEnvironment]...';


GO
CREATE TABLE [Tests].[TestEnvironment] (
    [pk_TestEnvironmentId]        INT           IDENTITY (1, 1) NOT NULL,
    [fk_TestId]                   INT           NOT NULL,
    [fk_DesiredOperatingSystemId] INT           NOT NULL,
    [EnvironmentName]             NVARCHAR (50) NOT NULL,
    [fk_SelectedMachineId]        NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([pk_TestEnvironmentId] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[TestApplication]...';


GO
CREATE TABLE [Tests].[TestApplication] (
    [pk_TestApplicationId] INT IDENTITY (1, 1) NOT NULL,
    [fk_TestEnvironmentId] INT NOT NULL,
    [fk_ApplicationId]     INT NOT NULL,
    PRIMARY KEY CLUSTERED ([pk_TestApplicationId] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[Test]...';


GO
CREATE TABLE [Tests].[Test] (
    [pk_TestId]           INT                IDENTITY (1, 1) NOT NULL,
    [ProductName]         NVARCHAR (50)      NOT NULL,
    [ProductVersion]      NVARCHAR (50)      NOT NULL,
    [Owner]               NVARCHAR (50)      NOT NULL,
    [TestDescription]     NVARCHAR (MAX)     NOT NULL,
    [ReportPath]          NVARCHAR (MAX)     NOT NULL,
    [IsReadyForExecution] BIT                NOT NULL,
    [RequestTime]         DATETIMEOFFSET (7) NOT NULL,
    [StartTime]           DATETIMEOFFSET (7) NULL,
    [EndTime]             DATETIMEOFFSET (7) NULL,
    PRIMARY KEY CLUSTERED ([pk_TestId] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[XCopyTestStep]...';


GO
CREATE TABLE [Tests].[XCopyTestStep] (
    [pk_XCopyTestStepId] INT            NOT NULL,
    [Destination]        NVARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([pk_XCopyTestStepId] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[TestStepParameter]...';


GO
CREATE TABLE [Tests].[TestStepParameter] (
    [pk_TestStepParameterId] INT            IDENTITY (1, 1) NOT NULL,
    [fk_TestStepId]          INT            NOT NULL,
    [Key]                    NVARCHAR (50)  NOT NULL,
    [Value]                  NVARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([pk_TestStepParameterId] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating FK_MachineApplication_ToMachine...';


GO
ALTER TABLE [Environments].[MachineApplication] WITH NOCHECK
    ADD CONSTRAINT [FK_MachineApplication_ToMachine] FOREIGN KEY ([fk_MachineId]) REFERENCES [Environments].[Machine] ([pk_MachineId]) ON DELETE CASCADE;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating FK_MachineApplication_ToApplication...';


GO
ALTER TABLE [Environments].[MachineApplication] WITH NOCHECK
    ADD CONSTRAINT [FK_MachineApplication_ToApplication] FOREIGN KEY ([fk_ApplicationId]) REFERENCES [Environments].[Application] ([pk_ApplicationId]);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating FK_Machine_ToOperatingSystem...';


GO
ALTER TABLE [Environments].[Machine] WITH NOCHECK
    ADD CONSTRAINT [FK_Machine_ToOperatingSystem] FOREIGN KEY ([fk_OperatingSystem]) REFERENCES [Environments].[OperatingSystem] ([pk_OperatingSystemId]);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating FK_HypervMachine_ToMachine...';


GO
ALTER TABLE [Environments].[HypervMachine] WITH NOCHECK
    ADD CONSTRAINT [FK_HypervMachine_ToMachine] FOREIGN KEY ([pk_HypervMachineId]) REFERENCES [Environments].[Machine] ([pk_MachineId]) ON DELETE CASCADE;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating FK_HypervMachine_ToHostMachine...';


GO
ALTER TABLE [Environments].[HypervMachine] WITH NOCHECK
    ADD CONSTRAINT [FK_HypervMachine_ToHostMachine] FOREIGN KEY ([fk_HostId]) REFERENCES [Environments].[Machine] ([pk_MachineId]);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating FK_PhysicalMachine_ToMachine...';


GO
ALTER TABLE [Environments].[PhysicalMachine] WITH NOCHECK
    ADD CONSTRAINT [FK_PhysicalMachine_ToMachine] FOREIGN KEY ([pk_PhysicalMachineId]) REFERENCES [Environments].[Machine] ([pk_MachineId]) ON DELETE CASCADE;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating FK_ScriptExecuteTestStep_ToTestStep...';


GO
ALTER TABLE [Tests].[ScriptExecuteTestStep] WITH NOCHECK
    ADD CONSTRAINT [FK_ScriptExecuteTestStep_ToTestStep] FOREIGN KEY ([pk_ScriptExecuteTestStepId]) REFERENCES [Tests].[TestStep] ([pk_TestStepId]) ON DELETE CASCADE;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating FK_MsiInstallTestStep_ToTestStep...';


GO
ALTER TABLE [Tests].[MsiInstallTestStep] WITH NOCHECK
    ADD CONSTRAINT [FK_MsiInstallTestStep_ToTestStep] FOREIGN KEY ([pk_MsiInstallTestStepId]) REFERENCES [Tests].[TestStep] ([pk_TestStepId]) ON DELETE CASCADE;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating FK_TestStep_ToTestEnvironment...';


GO
ALTER TABLE [Tests].[TestStep] WITH NOCHECK
    ADD CONSTRAINT [FK_TestStep_ToTestEnvironment] FOREIGN KEY ([fk_TestEnvironmentId]) REFERENCES [Tests].[TestEnvironment] ([pk_TestEnvironmentId]) ON DELETE CASCADE;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating FK_TestEnvironment_ToTest...';


GO
ALTER TABLE [Tests].[TestEnvironment] WITH NOCHECK
    ADD CONSTRAINT [FK_TestEnvironment_ToTest] FOREIGN KEY ([fk_TestId]) REFERENCES [Tests].[Test] ([pk_TestId]) ON DELETE CASCADE;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating FK_TestEnvironment_ToOperatingSystem...';


GO
ALTER TABLE [Tests].[TestEnvironment] WITH NOCHECK
    ADD CONSTRAINT [FK_TestEnvironment_ToOperatingSystem] FOREIGN KEY ([fk_DesiredOperatingSystemId]) REFERENCES [Environments].[OperatingSystem] ([pk_OperatingSystemId]);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating FK_TestEnvironment_ToMachine...';


GO
ALTER TABLE [Tests].[TestEnvironment] WITH NOCHECK
    ADD CONSTRAINT [FK_TestEnvironment_ToMachine] FOREIGN KEY ([fk_SelectedMachineId]) REFERENCES [Environments].[Machine] ([pk_MachineId]);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating FK_TestApplication_ToTestEnvironment...';


GO
ALTER TABLE [Tests].[TestApplication] WITH NOCHECK
    ADD CONSTRAINT [FK_TestApplication_ToTestEnvironment] FOREIGN KEY ([fk_TestEnvironmentId]) REFERENCES [Tests].[TestEnvironment] ([pk_TestEnvironmentId]) ON DELETE CASCADE;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating FK_TestApplication_ToApplication...';


GO
ALTER TABLE [Tests].[TestApplication] WITH NOCHECK
    ADD CONSTRAINT [FK_TestApplication_ToApplication] FOREIGN KEY ([fk_ApplicationId]) REFERENCES [Environments].[Application] ([pk_ApplicationId]);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating FK_XCopyTestStep_ToTestStep...';


GO
ALTER TABLE [Tests].[XCopyTestStep] WITH NOCHECK
    ADD CONSTRAINT [FK_XCopyTestStep_ToTestStep] FOREIGN KEY ([pk_XCopyTestStepId]) REFERENCES [Tests].[TestStep] ([pk_TestStepId]) ON DELETE CASCADE;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating FK_TestStepParameter_ToTestStep...';


GO
ALTER TABLE [Tests].[TestStepParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_TestStepParameter_ToTestStep] FOREIGN KEY ([fk_TestStepId]) REFERENCES [Tests].[TestStep] ([pk_TestStepId]) ON DELETE CASCADE;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[AddApplication]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[AddApplication]
    @name NVARCHAR(50),
    @major INT,
    @minor INT,
    @patch INT,
    @build INT
AS
    IF EXISTS(
        SELECT *
        FROM [Environments].[Application]
        WHERE
            [Name] = @name AND
            [VersionMajor] = @major AND
            [VersionMinor] = @minor AND
            [VersionPatch] = @patch AND
            [VersionBuild] = @build)
    BEGIN
        RAISERROR 
            (
                N'An entry for an application %s (%d.%d.%d.%d) already exists', 
                11, 
                1,
                @name,
                @major,
                @minor,
                @patch,
                @build
            )
        RETURN
    END

    BEGIN TRANSACTION

        INSERT INTO [Environments].[Application]
            (
                [Name],
                [VersionMajor],
                [VersionMinor],
                [VersionPatch],
                [VersionBuild]
            )
        VALUES
            (
                @name,
                @major,
                @minor,
                @patch,
                @build
            )

        --Return the autogenerated value for mapping back into the entity
        DECLARE @id INT

        SELECT @id = [pk_ApplicationId]
        FROM [Environments].[Application]
        WHERE [pk_ApplicationId] = SCOPE_IDENTITY()

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to insert application with ID %s.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
    SELECT @id as Id
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[AddPhysicalMachine]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[AddPhysicalMachine]
    @machineId NVARCHAR(50),
    @name NVARCHAR(50),
    @description NVARCHAR(MAX),
    @networkName NVARCHAR(50),
    @macAddress NVARCHAR(50),
    @isAvailableForTesting BIT,
    @isActive BIT,
    @operatingSystemId INT,
    @canStartRemotely BIT
AS
    IF EXISTS (
        SELECT * 
        FROM [Environments].[Machine]
        WHERE [pk_MachineId] = @machineId)
    BEGIN
        RAISERROR 
            (
                N'An entry for a machine with ID %s already exists.', 
                11, 
                1,
                @machineId
            )
        RETURN
    END

    BEGIN TRANSACTION

        INSERT INTO [Environments].[Machine]
            (
                [pk_MachineId],
                [Name],
                [Description],
                [NetworkName],
                [MacAddress],
                [IsAvailableForTesting],
                [IsActive],
                [fk_OperatingSystem]
            )
        VALUES
            (
                @machineId,
                @name,
                @description,
                @networkName,
                @macAddress,
                @isAvailableForTesting,
                @isActive,
                @operatingSystemId
            )

        INSERT INTO [Environments].[PhysicalMachine]
            (
                [CanStartRemotely],
                [pk_PhysicalMachineId]
            )
        VALUES
            (
                @canStartRemotely,
                @machineId
            )

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to insert machine with ID %s.', 
                    11, 
                    1,
                    @machineId
                )
            RETURN
        END

    COMMIT
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[AddOperatingSystem]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[AddOperatingSystem]
    @name NVARCHAR(50),
    @servicePack NVARCHAR(50),
    @architecturePointerSize INT,
    @culture NVARCHAR(50)
AS
    IF EXISTS (
        SELECT * 
        FROM [Environments].[OperatingSystem] 
        WHERE 
            [Name] = @name AND 
            [ServicePack] = @servicePack AND
            [ArchitecturePointerSize] = @architecturePointerSize AND
            [Culture] = @culture)
    BEGIN
        RAISERROR 
            (
                N'An entry for an operating system %s (%s) - %d - %s already exists', 
                11, 
                1,
                @name,
                @servicePack,
                @architecturePointerSize,
                @culture
            )
        RETURN
    END

    BEGIN TRANSACTION

        INSERT INTO [Environments].[OperatingSystem]
            (
                [Name],
                [ServicePack],
                [ArchitecturePointerSize],
                [Culture]
            )
        VALUES
            (
                @name,
                @servicePack,
                @architecturePointerSize,
                @culture
            )

        --Return the autogenerated value for mapping back into the entity
        DECLARE @id INT

        SELECT @id = [pk_OperatingSystemId]
        FROM [Environments].[OperatingSystem]
        WHERE [pk_OperatingSystemId] = SCOPE_IDENTITY()

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to insert operating system with ID %s.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
    SELECT @id as Id
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[AddApplicationToMachine]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[AddApplicationToMachine]
    @machineId NVARCHAR(50),
    @applicationId INT
AS
    IF NOT EXISTS (
        SELECT * 
        FROM [Environments].[Machine]
        WHERE [pk_MachineId] = @machineId)
    BEGIN
        RAISERROR 
            (
                N'An entry for a machine with ID %s does not exist.', 
                11, 
                1,
                @machineId
            )
        RETURN
    END

    IF NOT EXISTS (
        SELECT * 
        FROM [Environments].[Application]
        WHERE [pk_ApplicationId] = @applicationId)
    BEGIN
        RAISERROR 
            (
                N'An entry for an application with ID %d does not exist.', 
                11, 
                1,
                @applicationId
            )
        RETURN
    END

    BEGIN TRANSACTION

        INSERT INTO [Environments].[MachineApplication]
            (
                [fk_MachineId],
                [fk_ApplicationId]
            )
        VALUES
            (
                @machineId,
                @applicationId
            )

        --Return the autogenerated value for mapping back into the entity
        DECLARE @id INT

        SELECT @id = [pk_MachineApplicationId]
        FROM [Environments].[MachineApplication]
        WHERE [pk_MachineApplicationId] = SCOPE_IDENTITY()

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to insert application with ID %s.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
    SELECT @id as Id
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[DeleteOperatingSystemById]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[DeleteOperatingSystemById]
    @id int
AS
    IF NOT EXISTS (
        SELECT * 
        FROM [Environments].[OperatingSystem] 
        WHERE [pk_OperatingSystemId] = @id)
    BEGIN
        RAISERROR 
            (
                N'No entry for an operating system with ID %d has been found', 
                11, 
                1,
                @id
            )
        RETURN
    END

    BEGIN TRANSACTION
        
        DELETE FROM [Environments].[OperatingSystem]
        WHERE [pk_OperatingSystemId] = @id

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to update operating system with ID %s.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[DeleteApplicationFromMachine]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[DeleteApplicationFromMachine]
    @machineId NVARCHAR(50),
    @applicationId INT
AS
    IF NOT EXISTS (
        SELECT * 
        FROM [Environments].[MachineApplication]
        WHERE 
            [fk_MachineId] = @machineId AND 
            [fk_ApplicationId] = @applicationId)
    BEGIN
        RAISERROR 
            (
                N'An entry for a machine with ID %s and an application with ID %d does not exist.', 
                11, 
                1,
                @machineId,
                @applicationId
            )
        RETURN
    END

    BEGIN TRANSACTION

        DELETE FROM [Environments].[MachineApplication]
        WHERE 
            [fk_MachineId] = @machineId AND 
            [fk_ApplicationId] = @applicationId

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to update application with ID %s.', 
                    11, 
                    1,
                    @applicationId
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[DeleteApplicationById]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[DeleteApplicationById]
    @id int
AS
    IF NOT EXISTS (
        SELECT * 
        FROM [Environments].[Application] 
        WHERE [pk_ApplicationId] = @id)
    BEGIN
        RAISERROR 
            (
                N'No entry for an application with ID %d has been found', 
                11, 
                1,
                @id
            )
        RETURN
    END

    BEGIN TRANSACTION

        DELETE FROM [Environments].[MachineApplication]
        WHERE [fk_ApplicationId] = @id

        DELETE FROM [Environments].[Application]
        WHERE [pk_ApplicationId] = @id

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to delete application with ID %d.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[GetApplicationsByName]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[GetApplicationsByName]
    @name NVARCHAR(50) = NULL,
    @versionMajor INT = NULL,
    @versionMinor INT = NULL,
    @versionPatch INT = NULL,
    @versionBuild INT = NULL
AS
    SELECT 
        [pk_ApplicationId],
        [Name],
        [VersionMajor],
        [VersionMinor],
        [VersionPatch],
        [VersionBuild]
    FROM [Environments].[Application]
    WHERE ([Name] = @name OR @name IS NULL)
        AND ([VersionMajor] = @versionMajor OR @versionMajor IS NULL)
        AND ([VersionMinor] = @versionMinor OR @versionMinor IS NULL)
        AND ([VersionPatch] = @versionPatch OR @versionPatch IS NULL)
        AND ([VersionBuild] = @versionBuild OR @versionBuild IS NULL)
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[GetApplicationsById]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[GetApplicationsById]
    @id int = NULL
AS
    SELECT 
        [pk_ApplicationId],
        [Name],
        [VersionMajor],
        [VersionMinor],
        [VersionPatch],
        [VersionBuild]
    FROM [Environments].[Application]
    WHERE [pk_ApplicationId] = @id OR @id IS NULL
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[GetMachineApplicationByMachineId]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[GetMachineApplicationByMachineId]
    @id NVARCHAR(50)
AS
    SELECT
        [pk_MachineApplicationId],
        [fk_MachineId],
        [fk_ApplicationId]
    FROM [Environments].[MachineApplication]
    WHERE [fk_MachineId] = @id
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[GetMachineApplicationByApplicationId]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[GetMachineApplicationByApplicationId]
    @id int
AS
    SELECT
        [pk_MachineApplicationId],
        [fk_MachineId],
        [fk_ApplicationId]
    FROM [Environments].[MachineApplication]
    WHERE [fk_ApplicationId] = @id
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[GetHypervMachinesByHostId]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[GetHypervMachinesByHostId]
    @id NVARCHAR(50)
AS
    SELECT
        [Environments].[Machine].[pk_MachineId],
        [Environments].[Machine].[Name],
        [Environments].[Machine].[Description],
        [Environments].[Machine].[NetworkName],
        [Environments].[Machine].[MacAddress],
        [Environments].[Machine].[IsAvailableForTesting],
        [Environments].[Machine].[IsActive],
        [Environments].[Machine].[fk_OperatingSystem],
        [Environments].[HypervMachine].[pk_HypervMachineId],
        [Environments].[HypervMachine].[Image],
        [Environments].[HypervMachine].[SnapshotToReturnTo],
        [Environments].[HypervMachine].[fk_HostId]
    FROM [Environments].[HypervMachine]
    JOIN [Environments].[Machine]
    ON [Environments].[HypervMachine].[pk_HypervMachineId] = [Environments].[Machine].[pk_MachineId]
    WHERE [Environments].[HypervMachine].[fk_HostId] = @id OR @id IS NULL
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[GetHypervMachines]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[GetHypervMachines]
    @id NVARCHAR(50) = NULL
AS
    SELECT
        [Environments].[Machine].[pk_MachineId],
        [Environments].[Machine].[Name],
        [Environments].[Machine].[Description],
        [Environments].[Machine].[NetworkName],
        [Environments].[Machine].[MacAddress],
        [Environments].[Machine].[IsAvailableForTesting],
        [Environments].[Machine].[IsActive],
        [Environments].[Machine].[fk_OperatingSystem],
        [Environments].[HypervMachine].[pk_HypervMachineId],
        [Environments].[HypervMachine].[Image],
        [Environments].[HypervMachine].[SnapshotToReturnTo],
        [Environments].[HypervMachine].[fk_HostId]
    FROM [Environments].[HypervMachine]
    JOIN [Environments].[Machine]
    ON [Environments].[HypervMachine].[pk_HypervMachineId] = [Environments].[Machine].[pk_MachineId]
    WHERE [Environments].[Machine].[pk_MachineId] = @id OR @id IS NULL
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[GetOperatingSystemsById]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[GetOperatingSystemsById]
    @id int = NULL
AS
    SELECT
        [pk_OperatingSystemId],
        [Name],
        [ServicePack],
        [ArchitecturePointerSize],
        [Culture]
    FROM [Environments].[OperatingSystem]
    WHERE [pk_OperatingSystemId] = @id OR @id IS NULL
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[GetMachinesByOperatingSystemId]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[GetMachinesByOperatingSystemId]
    @operatingSystemId int = 0
AS
    SELECT [pk_MachineId]
    FROM [Environments].[Machine]
    WHERE [fk_OperatingSystem] = @operatingSystemId
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[GetMachinesByApplicationId]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[GetMachinesByApplicationId]
    @applicationId int
AS
    SELECT [pk_MachineId]
    FROM [Environments].[Machine]
    JOIN [Environments].[MachineApplication] ON [Environments].[Machine].[pk_MachineId] = [Environments].[MachineApplication].[fk_MachineId]
    WHERE [Environments].[MachineApplication].[fk_ApplicationId] = @applicationId
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[GetMachineApplications]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[GetMachineApplications]
    @id int = NULL
AS
    SELECT
        [pk_MachineApplicationId],
        [fk_MachineId],
        [fk_ApplicationId]
    FROM [Environments].[MachineApplication]
    WHERE [pk_MachineApplicationId] = @id OR @id IS NULL
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[IsHypervMachine]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[IsHypervMachine]
    @machineId NVARCHAR(50)
AS
    IF NOT EXISTS (
        SELECT * 
        FROM [Environments].[Machine]
        WHERE [pk_MachineId] = @machineId)
    BEGIN
        SELECT CAST(0 AS BIT)
        RETURN
    END
    
    IF NOT EXISTS (
        SELECT *
        FROM [Environments].[HypervMachine]
        WHERE [pk_HypervMachineId] = @machineId)
    BEGIN
        SELECT CAST(0 AS BIT)
        RETURN
    END

    SELECT CAST(1 AS BIT)
    RETURN
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[GetPhysicalMachines]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[GetPhysicalMachines]
    @id NVARCHAR(50) = NULL
AS
    SELECT 
        [Environments].[Machine].[pk_MachineId],
        [Environments].[Machine].[Name],
        [Environments].[Machine].[Description],
        [Environments].[Machine].[NetworkName],
        [Environments].[Machine].[MacAddress],
        [Environments].[Machine].[IsAvailableForTesting],
        [Environments].[Machine].[IsActive],
        [Environments].[Machine].[fk_OperatingSystem],
        [Environments].[PhysicalMachine].[pk_PhysicalMachineId],
        [Environments].[PhysicalMachine].[CanStartRemotely]
    FROM [Environments].[PhysicalMachine] 
    JOIN [Environments].[Machine] 
    ON [Environments].[PhysicalMachine].[pk_PhysicalMachineId] = [Environments].[Machine].[pk_MachineId]
    WHERE [Environments].[Machine].[pk_MachineId] = @id OR @id IS NULL
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[GetOperatingSystemsByName]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[GetOperatingSystemsByName]
    @name NVARCHAR(50) = NULL,
    @servicePack NVARCHAR(50) = NULL,
    @architecturePointerSize INT = NULL,
    @culture NVARCHAR(50) = NULL
AS
    SELECT
        [pk_OperatingSystemId],
        [Name],
        [ServicePack],
        [ArchitecturePointerSize],
        [Culture]
    FROM [Environments].[OperatingSystem]
    WHERE ([Name] = @name OR @name IS NULL)
        AND ([ServicePack] = @servicePack OR @servicePack IS NULL)
        AND ([ArchitecturePointerSize] = @architecturePointerSize OR @architecturePointerSize IS NULL)
        AND ([Culture] = @culture OR @culture IS NULL)
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[UpdateApplication]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[UpdateApplication]
    @id INT,
    @name NVARCHAR(50),
    @major INT,
    @minor INT,
    @patch INT,
    @build INT
AS
    IF NOT EXISTS(
        SELECT *
        FROM [Environments].[Application]
        WHERE [pk_ApplicationId] = @id)
    BEGIN
        RAISERROR 
            (
                N'An entry for an application %s (%d.%d.%d.%d) does not exist', 
                11, 
                1,
                @name,
                @major,
                @minor,
                @patch,
                @build
            )
        RETURN
    END

    BEGIN TRANSACTION

        UPDATE [Environments].[Application]
        SET
            [Name]  = @name,
            [VersionMajor] = @major,
            [VersionMinor] = @minor,
            [VersionPatch] = @patch,
            [VersionBuild] = @build
        WHERE [pk_ApplicationId] = @id

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to update application with ID %s.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[SwitchMachineToInactive]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[SwitchMachineToInactive]
    @machineId NVARCHAR(50)
AS
    IF NOT EXISTS (
        SELECT * 
        FROM [Environments].[Machine]
        WHERE [pk_MachineId] = @machineId)
    BEGIN
        RAISERROR 
            (
                N'An entry for a machine with ID %s does not exist.', 
                11, 
                1,
                @machineId
            )
        RETURN
    END

    BEGIN TRANSACTION

        UPDATE [Environments].[Machine]
        SET
            [IsActive] = 0
        WHERE [pk_MachineId] = @machineId

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to update machine with ID %s.', 
                    11, 
                    1,
                    @machineId
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[SwitchMachineToActive]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[SwitchMachineToActive]
    @machineId NVARCHAR(50)
AS
    IF NOT EXISTS (
        SELECT * 
        FROM [Environments].[Machine]
        WHERE [pk_MachineId] = @machineId)
    BEGIN
        RAISERROR 
            (
                N'An entry for a machine with ID %s does not exist.', 
                11, 
                1,
                @machineId
            )
        RETURN
    END

    BEGIN TRANSACTION

        UPDATE [Environments].[Machine]
        SET
            [IsActive] = 1
        WHERE [pk_MachineId] = @machineId

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to update machine with ID %s.', 
                    11, 
                    1,
                    @machineId
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[IsPhysicalMachine]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[IsPhysicalMachine]
    @machineId NVARCHAR(50)
AS
    IF NOT EXISTS (
        SELECT * 
        FROM [Environments].[Machine]
        WHERE [pk_MachineId] = @machineId)
    BEGIN
        SELECT CAST(0 AS BIT)
        RETURN
    END
    
    IF NOT EXISTS (
        SELECT *
        FROM [Environments].[PhysicalMachine]
        WHERE [pk_PhysicalMachineId] = @machineId)
    BEGIN
        SELECT CAST(0 AS BIT)
        RETURN
    END

    SELECT CAST(1 AS BIT)
    RETURN
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[UpdatePhysicalMachine]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[UpdatePhysicalMachine]
    @machineId NVARCHAR(50),
    @name NVARCHAR(50),
    @description NVARCHAR(MAX),
    @networkName NVARCHAR(50),
    @macAddress NVARCHAR(50),
    @isAvailableForTesting BIT,
    @isActive BIT,
    @operatingSystemId INT,
    @canStartRemotely BIT
AS
    IF NOT EXISTS (
        SELECT * 
        FROM [Environments].[PhysicalMachine]
        WHERE [pk_PhysicalMachineId] = @machineId)
    BEGIN
        RAISERROR 
            (
                N'An entry for a machine with ID %s does not exist.', 
                11, 
                1,
                @machineId
            )
        RETURN
    END

    BEGIN TRANSACTION

        UPDATE [Environments].[Machine]
        SET
            [Name] = @name,
            [Description] = @description,
            [NetworkName] = @networkName,
            [MacAddress] = @macAddress,
            [IsAvailableForTesting] = @isAvailableForTesting,
            [IsActive] = @isActive,
            [fk_OperatingSystem] = @operatingSystemId
        WHERE [pk_MachineId] = @machineId

        UPDATE [Environments].[PhysicalMachine]
        SET
            [CanStartRemotely] = @canStartRemotely
        WHERE [pk_PhysicalMachineId] = @machineId

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to update machine with ID %s.', 
                    11, 
                    1,
                    @machineId
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[UpdateOperatingSystem]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[UpdateOperatingSystem]
    @id int,
    @name NVARCHAR(50),
    @servicePack NVARCHAR(50),
    @architecturePointerSize INT,
    @culture NVARCHAR(50)
AS
    IF NOT EXISTS (
        SELECT * 
        FROM [Environments].[OperatingSystem] 
        WHERE [pk_OperatingSystemId] = @id)
    BEGIN
        RAISERROR 
            (
                N'An entry for an operating system %s (%s) - %d - %s does not exist', 
                11, 
                1,
                @name,
                @servicePack,
                @architecturePointerSize,
                @culture
            )
        RETURN
    END

    BEGIN TRANSACTION

        UPDATE [Environments].[OperatingSystem]
        SET
            [Name] = @name,
            [ServicePack] = @servicePack,
            [ArchitecturePointerSize] = @architecturePointerSize,
            [Culture] = @culture
        WHERE [pk_OperatingSystemId] = @id

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to update operating system with ID %s.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[UpdateHypervMachine]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[UpdateHypervMachine]
    @machineId NVARCHAR(50),
    @name NVARCHAR(50),
    @description NVARCHAR(MAX),
    @networkName NVARCHAR(50),
    @macAddress NVARCHAR(50),
    @isAvailableForTesting BIT,
    @isActive BIT,
    @operatingSystemId INT,
    @hostId NVARCHAR(50),
    @image NVARCHAR(50),
    @snapshotToReturnTo NVARCHAR(MAX)
AS
    IF NOT EXISTS (
        SELECT * 
        FROM [Environments].[HypervMachine]
        WHERE [pk_HypervMachineId] = @machineId)
    BEGIN
        RAISERROR 
            (
                N'An entry for a machine with ID %s does not exist.', 
                11, 
                1,
                @machineId
            )
        RETURN
    END

    DECLARE @isPhysicalMachine INT
    EXEC @isPhysicalMachine = [Environments].[IsPhysicalMachine] @hostId
    IF @isPhysicalMachine = 0
    BEGIN
        RAISERROR 
            (
                N'The machine with ID %s is not a physical machine and thus cannot be a host machine.', 
                11, 
                1,
                @hostId
            )
        RETURN
    END

    BEGIN TRANSACTION

        UPDATE [Environments].[Machine]
        SET
            [Name] = @name,
            [Description] = @description,
            [NetworkName] = @networkName,
            [MacAddress] = @macAddress,
            [IsAvailableForTesting] = @isAvailableForTesting,
            [IsActive] = @isActive,
            [fk_OperatingSystem] = @operatingSystemId
        WHERE [pk_MachineId] = @machineId

        UPDATE [Environments].[HypervMachine]
        SET
            [Image] = @image,
            [SnapshotToReturnTo] = @snapshotToReturnTo,
            [fk_HostId] = @hostId
        WHERE [pk_HypervMachineId] = @machineId

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to update machine with ID %s.', 
                    11, 
                    1,
                    @machineId
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[AddApplicationToTestEnvironment]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[AddApplicationToTestEnvironment]
    @testEnvironmentId INT,
    @applicationId INT
AS
    IF NOT EXISTS (
        SELECT * 
        FROM [Tests].[TestEnvironment]
        WHERE [pk_TestEnvironmentId] = @testEnvironmentId)
    BEGIN
        RAISERROR 
            (
                N'An entry for a test environment with ID %s does not exist.', 
                11, 
                1,
                @testEnvironmentId
            )
        RETURN
    END

    IF NOT EXISTS (
        SELECT * 
        FROM [Environments].[Application]
        WHERE [pk_ApplicationId] = @applicationId)
    BEGIN
        RAISERROR 
            (
                N'An entry for an application with ID %d does not exist.', 
                11, 
                1,
                @applicationId
            )
        RETURN
    END

    BEGIN TRANSACTION

        INSERT INTO [Tests].[TestApplication]
            (
                [fk_TestEnvironmentId],
                [fk_ApplicationId]
            )
        VALUES
            (
                @testEnvironmentId,
                @applicationId
            )

        --Return the autogenerated value for mapping back into the entity
        DECLARE @id INT

        SELECT @id = [pk_TestApplicationId]
        FROM [Tests].[TestApplication]
        WHERE [pk_TestApplicationId] = SCOPE_IDENTITY()

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to insert application with ID %s.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
    SELECT @id as Id
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[AddTestEnvironment]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[AddTestEnvironment]
    @testId INT,
    @desiredOperatingSystemId INT,
    @name NVARCHAR(50)
AS
    IF EXISTS (
        SELECT *
        FROM [Tests].[TestEnvironment]
        WHERE 
            [fk_TestId] = @testId AND
            [EnvironmentName] = @name)
    BEGIN
        RAISERROR 
            (
                N'An entry for an environment for test %d with name %s already exists', 
                11, 
                1,
                @testId,
                @name
            )
        RETURN
    END

    BEGIN TRANSACTION

        INSERT INTO [Tests].[TestEnvironment]
            (
                [fk_TestId],
                [fk_DesiredOperatingSystemId],
                [EnvironmentName]
            )
        VALUES
            (
                @testId,
                @desiredOperatingSystemId,
                @name
            )

        DECLARE @id INT

        SELECT @id = [pk_TestEnvironmentId]
        FROM [Tests].[TestEnvironment]
        WHERE [pk_TestEnvironmentId] = SCOPE_IDENTITY()

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    N'Failed to insert an environment for test %d with name %s', 
                    11, 
                    1,
                    @testId,
                    @name
                )
            RETURN
        END

    COMMIT
    SELECT @id as Id
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[AddTest]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[AddTest]
    @productName NVARCHAR(50),
    @productVersion NVARCHAR(50),
    @owner NVARCHAR(50),
    @description NVARCHAR(MAX),
    @reportPath NVARCHAR(MAX)
AS
    BEGIN TRANSACTION

        INSERT INTO [Tests].[Test]
            (
                [ProductName],
                [ProductVersion],
                [Owner],
                [TestDescription],
                [ReportPath],
                [IsReadyForExecution],
                [RequestTime]
            )
        VALUES
            (
                @productName,
                @productVersion,
                @owner,
                @description,
                @reportPath,
                0,
                SYSDATETIMEOFFSET()
            )

        DECLARE @id INT
        SELECT @id = [pk_TestId]
        FROM [Tests].[Test]
        WHERE [pk_TestId] = SCOPE_IDENTITY()

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to insert test with ID %d.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
    SELECT @id as Id
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[AddScriptExecuteTestStep]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[AddScriptExecuteTestStep]
    @testEnvironmentId INT,
    @order INT,
    @language NVARCHAR(50)
AS
    BEGIN TRANSACTION

        INSERT INTO [Tests].[TestStep]
            (
                [fk_TestEnvironmentId],
                [Order]
            )
        VALUES
            (
                @testEnvironmentId,
                @order
            )

        DECLARE @id INT
        SELECT @id = [pk_TestStepId]
        FROM [Tests].[TestStep]
        WHERE [pk_TestStepId] = SCOPE_IDENTITY()

        INSERT INTO [Tests].[ScriptExecuteTestStep]
            (
                [pk_ScriptExecuteTestStepId],
                [Language]
            )
        VALUES
            (
                @id,
                @language
            )

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to insert test step with ID %d.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
    SELECT @id as Id
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[AddMsiInstallTestStep]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[AddMsiInstallTestStep]
    @testEnvironmentId INT,
    @order INT
AS
    BEGIN TRANSACTION

        INSERT INTO [Tests].[TestStep]
            (
                [fk_TestEnvironmentId],
                [Order]
            )
        VALUES
            (
                @testEnvironmentId,
                @order
            )

        DECLARE @id INT
        SELECT @id = [pk_TestStepId]
        FROM [Tests].[TestStep]
        WHERE [pk_TestStepId] = SCOPE_IDENTITY()

        INSERT INTO [Tests].[MsiInstallTestStep]
            (
                [pk_MsiInstallTestStepId]
            )
        VALUES
            (
                @id
            )

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to insert test step with ID %d.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
    SELECT @id as Id
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[AttachMachineToTestEnvironment]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[AttachMachineToTestEnvironment]
    @environment INT,
    @machine NVARCHAR(50)
AS
    IF NOT EXISTS(
        SELECT *
        FROM [Tests].[TestEnvironment]
        WHERE [pk_TestEnvironmentId] = @environment)
    BEGIN
        RAISERROR 
            (
                N'An entry for a test environment with id %d does not exist', 
                11, 
                1,
                @environment
            )
        RETURN
    END

    IF NOT EXISTS(
        SELECT *
        FROM [Environments].[Machine]
        WHERE [pk_MachineId] = @machine)
    BEGIN
        RAISERROR 
            (
                N'An entry for a machine with id %s does not exist', 
                11, 
                1,
                @machine
            )
        RETURN
    END

    BEGIN TRANSACTION

        UPDATE [Tests].[TestEnvironment]
        SET
            [fk_SelectedMachineId] = @machine
        WHERE [pk_TestEnvironmentId] = @environment

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to update test environment with ID %d.', 
                    11, 
                    1,
                    @environment
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[AddXCopyTestStep]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[AddXCopyTestStep]
    @testEnvironmentId INT,
    @order INT,
    @destination NVARCHAR(MAX)
AS
    BEGIN TRANSACTION

        INSERT INTO [Tests].[TestStep]
            (
                [fk_TestEnvironmentId],
                [Order]
            )
        VALUES
            (
                @testEnvironmentId,
                @order
            )

        DECLARE @id INT
        SELECT @id = [pk_TestStepId]
        FROM [Tests].[TestStep]
        WHERE [pk_TestStepId] = SCOPE_IDENTITY()

        INSERT INTO [Tests].[XCopyTestStep]
            (
                [pk_XCopyTestStepId],
                [Destination]
            )
        VALUES
            (
                @id,
                @destination
            )

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to insert test step with ID %d.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
    SELECT @id as Id
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[AddTestStepParameter]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[AddTestStepParameter]
    @testStepId INT,
    @key NVARCHAR(50),
    @value NVARCHAR(MAX)
AS
    BEGIN TRANSACTION

        INSERT INTO [Tests].[TestStepParameter]
            (
                [fk_TestStepId],
                [Key],
                [Value]
            )
        VALUES
            (
                @testStepId,
                @key,
                @value
            )

        DECLARE @id INT
        SELECT @id = [pk_TestStepParameterId]
        FROM [Tests].[TestStepParameter]
        WHERE [pk_TestStepParameterId] = SCOPE_IDENTITY()

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to insert test step parameter with ID %d.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
    SELECT @id as Id
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[DeleteTestById]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[DeleteTestById]
    @id int
AS
    IF NOT EXISTS (
        SELECT *
        FROM [Tests].[Test]
        WHERE [pk_TestId] = @id)
    BEGIN
        RAISERROR
            (
                N'No entry for a test with ID %d has been found', 
                11, 
                1,
                @id
            )
        RETURN
    END

    BEGIN TRANSACTION
        
        DELETE FROM [Tests].[Test]
        WHERE [pk_TestId] = @id

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to delete test with ID %d.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[DeleteScriptExecuteTestStepById]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[DeleteScriptExecuteTestStepById]
    @id INT
AS
    IF NOT EXISTS (
        SELECT * 
        FROM [Tests].[ScriptExecuteTestStep] 
        WHERE [pk_ScriptExecuteTestStepId] = @id)
    BEGIN
        RAISERROR 
            (
                N'No entry for a script execute test step with ID %d has been found', 
                11, 
                1,
                @id
            )
        RETURN
    END

    BEGIN TRANSACTION

        DELETE FROM [Tests].[ScriptExecuteTestStep]
        WHERE [pk_ScriptExecuteTestStepId] = @id

        DELETE FROM [Tests].[TestStep]
        WHERE [pk_TestStepId] = @id

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to delete script execute test step with ID %d.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[DeleteMsiInstallTestStepById]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[DeleteMsiInstallTestStepById]
    @id INT
AS
    IF NOT EXISTS (
        SELECT * 
        FROM [Tests].[MsiInstallTestStep] 
        WHERE [pk_MsiInstallTestStepId] = @id)
    BEGIN
        RAISERROR 
            (
                N'No entry for a MSI install test step with ID %d has been found', 
                11, 
                1,
                @id
            )
        RETURN
    END

    BEGIN TRANSACTION

        DELETE FROM [Tests].[MsiInstallTestStep]
        WHERE [pk_MsiInstallTestStepId] = @id

        DELETE FROM [Tests].[TestStep]
        WHERE [pk_TestStepId] = @id

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to delete MSI install test step with ID %d.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[DeleteApplicationFromTestEnvironment]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[DeleteApplicationFromTestEnvironment]
    @testEnvironmentId INT,
    @applicationId INT
AS
    IF NOT EXISTS (
        SELECT * 
        FROM [Tests].[TestApplication]
        WHERE 
            [fk_TestEnvironmentId] = @testEnvironmentId AND 
            [fk_ApplicationId] = @applicationId)
    BEGIN
        RAISERROR 
            (
                N'An entry for an environment with ID %s and an application with ID %d does not exist.', 
                11, 
                1,
                @testEnvironmentId,
                @applicationId
            )
        RETURN
    END

    BEGIN TRANSACTION

        DELETE FROM [Tests].[TestApplication]
        WHERE 
            [fk_TestEnvironmentId] = @testEnvironmentId AND 
            [fk_ApplicationId] = @applicationId

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to update application with ID %s.', 
                    11, 
                    1,
                    @applicationId
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[DeleteXCopyTestStepById]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[DeleteXCopyTestStepById]
    @id INT
AS
    IF NOT EXISTS (
        SELECT * 
        FROM [Tests].[XCopyTestStep] 
        WHERE [pk_XCopyTestStepId] = @id)
    BEGIN
        RAISERROR 
            (
                N'No entry for a x-copy test step with ID %d has been found', 
                11, 
                1,
                @id
            )
        RETURN
    END

    BEGIN TRANSACTION

        DELETE FROM [Tests].[XCopyTestStep]
        WHERE [pk_XCopyTestStepId] = @id

        DELETE FROM [Tests].[TestStep]
        WHERE [pk_TestStepId] = @id

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to delete x-copy test step with ID %d.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[DeleteTestStepParameterById]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[DeleteTestStepParameterById]
    @id INT
AS
    IF NOT EXISTS (
        SELECT * 
        FROM [Tests].[TestStepParameter] 
        WHERE [pk_TestStepParameterId] = @id)
    BEGIN
        RAISERROR 
            (
                N'No entry for a test step parameter with ID %d has been found', 
                11, 
                1,
                @id
            )
        RETURN
    END

    BEGIN TRANSACTION

        DELETE FROM [Tests].[TestStepParameter]
        WHERE [pk_TestStepParameterId] = @id

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to delete test step parameter with ID %d.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[DeleteTestEnvironmentById]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[DeleteTestEnvironmentById]
    @id INT
AS
    IF NOT EXISTS (
        SELECT * 
        FROM [Tests].[TestEnvironment] 
        WHERE [pk_TestEnvironmentId] = @id)
    BEGIN
        RAISERROR 
            (
                N'No entry for a test environment with ID %d has been found', 
                11, 
                1,
                @id
            )
        RETURN
    END

    BEGIN TRANSACTION

        DELETE FROM [Tests].[TestEnvironment]
        WHERE [pk_TestEnvironmentId] = @id

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to delete test environment with ID %d.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[GetTestApplicationsByApplicationId]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[GetTestApplicationsByApplicationId]
    @id INT
AS
    SELECT
        [pk_TestApplicationId]
    FROM [Tests].[TestApplication]
    WHERE [fk_ApplicationId] = @id
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[GetNotExecutedTests]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[GetNotExecutedTests]
AS
    SELECT
        [pk_TestId],
        [ProductName],
        [ProductVersion],
        [Owner],
        [TestDescription],
        [ReportPath],
        [IsReadyForExecution],
        [RequestTime],
        [StartTime],
        [EndTime]
    FROM [Tests].[Test]
    WHERE [StartTime] IS NULL AND [IsReadyForExecution] = 1
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[GetTestEnvironmentByOperatingSystemId]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[GetTestEnvironmentByOperatingSystemId]
    @id INT
AS
    SELECT
        [pk_TestEnvironmentId]
    FROM [Tests].[TestEnvironment]
    WHERE [fk_DesiredOperatingSystemId] = @id
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[GetTestEnvironmentByMachineId]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[GetTestEnvironmentByMachineId]
    @id NVARCHAR(50)
AS
    SELECT
        [pk_TestEnvironmentId],
        [fk_TestId],
        [fk_DesiredOperatingSystemId],
        [EnvironmentName],
        [fk_SelectedMachineId]
    FROM [Tests].[TestEnvironment]
    WHERE [fk_SelectedMachineId] = @id
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[GetTestApplicationsByTestEnvironmentId]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[GetTestApplicationsByTestEnvironmentId]
    @id INT
AS
    SELECT
        [pk_TestApplicationId]
    FROM [Tests].[TestApplication]
    WHERE [fk_TestEnvironmentId] = @id
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[GetTestApplicationsById]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[GetTestApplicationsById]
    @id INT = NULL
AS
    SELECT
        [pk_TestApplicationId],
        [fk_TestEnvironmentId],
        [fk_ApplicationId]
    FROM [Tests].[TestApplication]
    WHERE [pk_TestApplicationId] = @id OR @id IS NULL
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[GetTestStepParametersById]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[GetTestStepParametersById]
    @id INT
AS
    SELECT
        [pk_TestStepParameterId],
        [fk_TestStepId],
        [Key],
        [Value]
    FROM [Tests].[TestStepParameter]
    WHERE [pk_TestStepParameterId] = @id OR @id IS NULL
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[GetTestsById]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[GetTestsById]
    @id INT = NULL
AS
    SELECT
        [pk_TestId],
        [ProductName],
        [ProductVersion],
        [Owner],
        [TestDescription],
        [ReportPath],
        [IsReadyForExecution],
        [RequestTime],
        [StartTime],
        [EndTime]
    FROM [Tests].[Test]
    WHERE [pk_TestId] = @id OR @id IS NULL
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[GetTestEnvironmentsByTestId]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[GetTestEnvironmentsByTestId]
    @id INT
AS
    SELECT
        [pk_TestEnvironmentId]
    FROM [Tests].[TestEnvironment]
    WHERE [fk_TestId] = @id
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[GetTestStepsByTestEnvironmentId]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[GetTestStepsByTestEnvironmentId]
    @id INT
AS
    SELECT
        [pk_TestStepId]
    FROM [Tests].[TestStep]
    WHERE [fk_TestEnvironmentId] = @id
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[GetTestStepParametersByTestStepId]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[GetTestStepParametersByTestStepId]
    @id INT
AS
    SELECT
        [pk_TestStepParameterId]
    FROM [Tests].[TestStepParameter]
    WHERE [fk_TestStepId] = @id
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[UpdateMsiInstallTestStep]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[UpdateMsiInstallTestStep]
    @id INT,
    @testEnvironmentId INT,
    @order INT
AS
    IF NOT EXISTS (
        SELECT * 
        FROM [Tests].[MsiInstallTestStep]
        WHERE [pk_MsiInstallTestStepId] = @id)
    BEGIN
        RAISERROR 
            (
                N'An entry for a test step with ID %d does not exist.', 
                11, 
                1,
                @id
            )
        RETURN
    END

    BEGIN TRANSACTION

        UPDATE [Tests].[TestStep]
        SET
            [fk_TestEnvironmentId] = @testEnvironmentId,
            [Order] = @order
        WHERE [pk_TestStepId] = @id

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to update msi install test step with ID %d.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[MarkTestAsStarted]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[MarkTestAsStarted]
    @id INT
AS
    IF NOT EXISTS(
        SELECT *
        FROM [Tests].[Test]
        WHERE [pk_TestId] = @id)
    BEGIN
        RAISERROR 
            (
                N'An entry for a test with id %d does not exist', 
                11, 
                1,
                @id
            )
        RETURN
    END

    DECLARE @isReadyForExecution BIT
    SELECT @isReadyForExecution = [IsReadyForExecution]
    FROM [Tests].[Test]
    WHERE [pk_TestId] = @id

    IF @isReadyForExecution = 0
    BEGIN
        RAISERROR 
            (
                N'Cannot start a test (%d) that is not ready for execution.', 
                11, 
                1,
                @id
            )
        RETURN
    END

    BEGIN TRANSACTION

        UPDATE [Tests].[Test]
        SET
            [StartTime] = SYSDATETIMEOFFSET()
        WHERE [pk_TestId] = @id

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to update test with ID %d.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[MarkTestAsReadyForExecution]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[MarkTestAsReadyForExecution]
    @id INT
AS
    IF NOT EXISTS(
        SELECT *
        FROM [Tests].[Test]
        WHERE [pk_TestId] = @id)
    BEGIN
        RAISERROR 
            (
                N'An entry for a test with id %d does not exist', 
                11, 
                1,
                @id
            )
        RETURN
    END

    BEGIN TRANSACTION

        UPDATE [Tests].[Test]
        SET
            [IsReadyForExecution] = 1
        WHERE [pk_TestId] = @id

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to update test with ID %d.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[MarkTestAsEnded]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[MarkTestAsEnded]
    @id INT
AS
    IF NOT EXISTS(
        SELECT *
        FROM [Tests].[Test]
        WHERE [pk_TestId] = @id)
    BEGIN
        RAISERROR 
            (
                N'An entry for a test with id %d does not exist', 
                11, 
                1,
                @id
            )
        RETURN
    END

    DECLARE @startTime DATETIMEOFFSET
    SELECT @startTime = [StartTime]
    FROM [Tests].[Test]
    WHERE [pk_TestId] = @id

    IF @startTime IS NULL
    BEGIN
        RAISERROR 
            (
                N'Cannot stop a test (%d) that was never started.', 
                11, 
                1,
                @id
            )
        RETURN
    END

    BEGIN TRANSACTION

        UPDATE [Tests].[Test]
        SET
            [EndTime] = SYSDATETIMEOFFSET()
        WHERE [pk_TestId] = @id

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to update test with ID %d.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[UpdateTestStepParameter]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[UpdateTestStepParameter]
    @id INT,
    @testStepId INT,
    @key NVARCHAR(50),
    @value NVARCHAR(MAX)
AS
    IF NOT EXISTS (
        SELECT * 
        FROM [Tests].[TestStepParameter]
        WHERE [pk_TestStepParameterId] = @id)
    BEGIN
        RAISERROR 
            (
                N'An entry for a test step parameter with ID %d does not exist.', 
                11, 
                1,
                @id
            )
        RETURN
    END

    BEGIN TRANSACTION

        UPDATE [Tests].[TestStepParameter]
        SET
            [fk_TestStepId] = @testStepId,
            [Key] = @key,
            [Value] = @value
        WHERE [pk_TestStepParameterId] = @id

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to update test step parameter with ID %d.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[UpdateTestEnvironment]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[UpdateTestEnvironment]
    @id INT,
    @testId INT,
    @desiredOperatingSystemId INT,
    @name NVARCHAR(50)
AS
    IF NOT EXISTS(
        SELECT *
        FROM [Tests].[TestEnvironment]
        WHERE [pk_TestEnvironmentId] = @id)
    BEGIN
        RAISERROR 
            (
                N'An entry for a test environment with id %d does not exist', 
                11, 
                1,
                @id
            )
        RETURN
    END

    BEGIN TRANSACTION

        UPDATE [Tests].[TestEnvironment]
        SET
            [fk_TestId] = @testId,
            [fk_DesiredOperatingSystemId] = @desiredOperatingSystemId,
            [EnvironmentName] = @name
        WHERE [pk_TestEnvironmentId] = @id

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to update test environment with ID %s.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[UpdateTest]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[UpdateTest]
    @id INT,
    @productName NVARCHAR(50),
    @productVersion NVARCHAR(50),
    @owner NVARCHAR(50),
    @description NVARCHAR(MAX),
    @reportPath NVARCHAR(MAX)
AS
    IF NOT EXISTS(
        SELECT *
        FROM [Tests].[Test]
        WHERE [pk_TestId] = @id)
    BEGIN
        RAISERROR 
            (
                N'An entry for a test with id %d does not exist', 
                11, 
                1,
                @id
            )
        RETURN
    END

    BEGIN TRANSACTION

        UPDATE [Tests].[Test]
        SET
            [ProductName]  = @productName,
            [ProductVersion] = @productVersion,
            [Owner] = @owner,
            [TestDescription] = @description,
            [ReportPath] = @reportPath
        WHERE [pk_TestId] = @id

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to update test with ID %s.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[UpdateScriptExecuteTestStep]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[UpdateScriptExecuteTestStep]
    @id INT,
    @testEnvironmentId INT,
    @order INT,
    @language NVARCHAR(50)
AS
    IF NOT EXISTS (
        SELECT * 
        FROM [Tests].[ScriptExecuteTestStep]
        WHERE [pk_ScriptExecuteTestStepId] = @id)
    BEGIN
        RAISERROR 
            (
                N'An entry for a test step with ID %d does not exist.', 
                11, 
                1,
                @id
            )
        RETURN
    END

    BEGIN TRANSACTION

        UPDATE [Tests].[TestStep]
        SET
            [fk_TestEnvironmentId] = @testEnvironmentId,
            [Order] = @order
        WHERE [pk_TestStepId] = @id

        UPDATE [Tests].[ScriptExecuteTestStep]
        SET
            [Language] = @language
        WHERE [pk_ScriptExecuteTestStepId] = @id

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to update script execute test step with ID %d.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[UpdateXCopyTestStep]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[UpdateXCopyTestStep]
    @id INT,
    @testEnvironmentId INT,
    @order INT,
    @destination NVARCHAR(MAX)
AS
    IF NOT EXISTS (
        SELECT * 
        FROM [Tests].[XCopyTestStep]
        WHERE [pk_XCopyTestStepId] = @id)
    BEGIN
        RAISERROR 
            (
                N'An entry for a test step with ID %d does not exist.', 
                11, 
                1,
                @id
            )
        RETURN
    END

    BEGIN TRANSACTION

        UPDATE [Tests].[TestStep]
        SET
            [fk_TestEnvironmentId] = @testEnvironmentId,
            [Order] = @order
        WHERE [pk_TestStepId] = @id

        UPDATE [Tests].[XCopyTestStep]
        SET
            [Destination] = @destination
        WHERE [pk_XCopyTestStepId] = @id

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to update x-copy test step with ID %d.', 
                    11, 
                    1,
                    @id
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[GetMsiInstallTestStepsById]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[GetMsiInstallTestStepsById]
    @id INT = NULL
AS
    SELECT
        [Tests].[TestStep].[pk_TestStepId],
        [Tests].[TestStep].[fk_TestEnvironmentId],
        [Tests].[TestStep].[Order]
    FROM [Tests].[MsiInstallTestStep]
    JOIN [Tests].[TestStep]
    ON [Tests].[MsiInstallTestStep].[pk_MsiInstallTestStepId] = [Tests].[TestStep].[pk_TestStepId]
    WHERE [Tests].[MsiInstallTestStep].[pk_MsiInstallTestStepId] = @id OR @id IS NULL
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[GetScriptExecuteTestStepsById]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[GetScriptExecuteTestStepsById]
    @id INT = NULL
AS
    SELECT
        [Tests].[TestStep].[pk_TestStepId],
        [Tests].[TestStep].[fk_TestEnvironmentId],
        [Tests].[TestStep].[Order],
        [Tests].[ScriptExecuteTestStep].[Language]
    FROM [Tests].[ScriptExecuteTestStep]
    JOIN [Tests].[TestStep]
    ON [Tests].[ScriptExecuteTestStep].[pk_ScriptExecuteTestStepId] = [Tests].[TestStep].[pk_TestStepId]
    WHERE [Tests].[ScriptExecuteTestStep].[pk_ScriptExecuteTestStepId] = @id OR @id IS NULL
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[GetTestEnvironmentsById]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[GetTestEnvironmentsById]
    @id INT = NULL
AS
    SELECT
        [pk_TestEnvironmentId],
        [fk_TestId],
        [fk_DesiredOperatingSystemId],
        [EnvironmentName],
        [fk_SelectedMachineId]
    FROM [Tests].[TestEnvironment]
    WHERE [pk_TestEnvironmentId] = @id OR @id IS NULL
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Tests].[GetXCopyTestStepsById]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Tests].[GetXCopyTestStepsById]
    @id INT = NULL
AS
    SELECT
        [Tests].[TestStep].[pk_TestStepId],
        [Tests].[TestStep].[fk_TestEnvironmentId],
        [Tests].[TestStep].[Order],
        [Tests].[XCopyTestStep].[Destination]
    FROM [Tests].[XCopyTestStep]
    JOIN [Tests].[TestStep]
    ON [Tests].[XCopyTestStep].[pk_XCopyTestStepId] = [Tests].[TestStep].[pk_TestStepId]
    WHERE [Tests].[XCopyTestStep].[pk_XCopyTestStepId] = @id OR @id IS NULL
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Versioning].[GetSchemaVersion]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

-- Reads current database schema version.
CREATE PROCEDURE [Versioning].[GetSchemaVersion]
AS
BEGIN
    SELECT 1
END
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[AddHypervMachine]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[AddHypervMachine]
    @machineId NVARCHAR(50),
    @name NVARCHAR(50),
    @description NVARCHAR(MAX),
    @networkName NVARCHAR(50),
    @macAddress NVARCHAR(50),
    @isAvailableForTesting BIT,
    @isActive BIT,
    @operatingSystemId INT,
    @hostId NVARCHAR(50),
    @image NVARCHAR(50),
    @snapshotToReturnTo NVARCHAR(MAX)
AS
    IF EXISTS (
        SELECT * 
        FROM [Environments].[Machine]
        WHERE [pk_MachineId] = @machineId)
    BEGIN
        RAISERROR 
            (
                N'An entry for a machine with ID %s already exists.', 
                11, 
                1,
                @machineId
            )
        RETURN
    END

    DECLARE @isPhysicalMachine INT
    EXEC @isPhysicalMachine = [Environments].[IsPhysicalMachine] @hostId
    IF @isPhysicalMachine = 0
    BEGIN
        RAISERROR 
            (
                N'The machine with ID %s is not a physical machine and thus cannot be a host machine.', 
                11, 
                1,
                @hostId
            )
        RETURN
    END

    BEGIN TRANSACTION

        INSERT INTO [Environments].[Machine]
            (
                [pk_MachineId],
                [Name],
                [Description],
                [NetworkName],
                [MacAddress],
                [IsAvailableForTesting],
                [IsActive],
                [fk_OperatingSystem]
            )
        VALUES
            (
                @machineId,
                @name,
                @description,
                @networkName,
                @macAddress,
                @isAvailableForTesting,
                @isActive,
                @operatingSystemId
            )

        INSERT INTO [Environments].[HypervMachine]
            (
                [pk_HypervMachineId],
                [Image],
                [SnapshotToReturnTo],
                [fk_HostId]
            )
        VALUES
            (
                @machineId,
                @image,
                @snapshotToReturnTo,
                @hostId
            )

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to insert machine with ID %s.', 
                    11, 
                    1,
                    @machineId
                )
            RETURN
        END

    COMMIT
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[DeleteHypervMachineById]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[DeleteHypervMachineById]
    @machineId NVARCHAR(50)
AS
    IF NOT EXISTS (
        SELECT * 
        FROM [Environments].[Machine] 
        WHERE [pk_MachineId] = @machineId)
    BEGIN
        RAISERROR 
            (
                N'No entry for a Hyper-V machine with ID %s has been found', 
                11, 
                1,
                @machineId
            )
        RETURN
    END

    DECLARE @isHypervMachine INT
    EXEC @isHypervMachine = [Environments].[IsHypervMachine] @machineId
    IF @isHypervMachine = 0
    BEGIN
        RAISERROR 
            (
                N'The machine with ID %s is not a Hyper-V machine.', 
                11, 
                1,
                @machineId
            )
        RETURN
    END

    BEGIN TRANSACTION

        DELETE FROM [Environments].[MachineApplication]
        WHERE [fk_MachineId] = @machineId

        DELETE FROM [Environments].[HypervMachine]
        WHERE [pk_HypervMachineId] = @machineId

        DELETE FROM [Environments].[Machine]
        WHERE [pk_MachineId] = @machineId

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to delete Hyper-V machine with ID %s.', 
                    11, 
                    1,
                    @machineId
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [Environments].[DeletePhysicalMachineById]...';


GO
-------------------------------------------------------------------------------
-- <copyright company="Sherlock">
--     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
-- </copyright>
-------------------------------------------------------------------------------

CREATE PROCEDURE [Environments].[DeletePhysicalMachineById]
    @machineId NVARCHAR(50)
AS
    IF NOT EXISTS (
        SELECT * 
        FROM [Environments].[Machine] 
        WHERE [pk_MachineId] = @machineId)
    BEGIN
        RAISERROR 
            (
                N'No entry for a physical machine with ID %s has been found', 
                11, 
                1,
                @machineId
            )
        RETURN
    END

    DECLARE @isPhysicalMachine INT
    EXEC @isPhysicalMachine = [Environments].[IsPhysicalMachine] @machineId
    IF @isPhysicalMachine = 0
    BEGIN
        RAISERROR 
            (
                N'The machine with ID %s is not a physical machine.', 
                11, 
                1,
                @machineId
            )
        RETURN
    END

    BEGIN TRANSACTION

        DELETE FROM [Environments].[MachineApplication]
        WHERE [fk_MachineId] = @machineId

        DELETE FROM [Environments].[PhysicalMachine]
        WHERE [pk_PhysicalMachineId] = @machineId

        DELETE FROM [Environments].[Machine]
        WHERE [pk_MachineId] = @machineId

        IF @@ERROR <> 0
        BEGIN
            ROLLBACK

            RAISERROR 
                (
                    'Failed to delete physical machine with ID %s.', 
                    11, 
                    1,
                    @machineId
                )
            RETURN
        END

    COMMIT
RETURN 0
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT N'The transacted portion of the database update succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT N'The transacted portion of the database update failed.'
GO
DROP TABLE #tmpErrors
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [Sherlock];


GO
ALTER TABLE [Environments].[MachineApplication] WITH CHECK CHECK CONSTRAINT [FK_MachineApplication_ToMachine];

ALTER TABLE [Environments].[MachineApplication] WITH CHECK CHECK CONSTRAINT [FK_MachineApplication_ToApplication];

ALTER TABLE [Environments].[Machine] WITH CHECK CHECK CONSTRAINT [FK_Machine_ToOperatingSystem];

ALTER TABLE [Environments].[HypervMachine] WITH CHECK CHECK CONSTRAINT [FK_HypervMachine_ToMachine];

ALTER TABLE [Environments].[HypervMachine] WITH CHECK CHECK CONSTRAINT [FK_HypervMachine_ToHostMachine];

ALTER TABLE [Environments].[PhysicalMachine] WITH CHECK CHECK CONSTRAINT [FK_PhysicalMachine_ToMachine];

ALTER TABLE [Tests].[ScriptExecuteTestStep] WITH CHECK CHECK CONSTRAINT [FK_ScriptExecuteTestStep_ToTestStep];

ALTER TABLE [Tests].[MsiInstallTestStep] WITH CHECK CHECK CONSTRAINT [FK_MsiInstallTestStep_ToTestStep];

ALTER TABLE [Tests].[TestStep] WITH CHECK CHECK CONSTRAINT [FK_TestStep_ToTestEnvironment];

ALTER TABLE [Tests].[TestEnvironment] WITH CHECK CHECK CONSTRAINT [FK_TestEnvironment_ToTest];

ALTER TABLE [Tests].[TestEnvironment] WITH CHECK CHECK CONSTRAINT [FK_TestEnvironment_ToOperatingSystem];

ALTER TABLE [Tests].[TestEnvironment] WITH CHECK CHECK CONSTRAINT [FK_TestEnvironment_ToMachine];

ALTER TABLE [Tests].[TestApplication] WITH CHECK CHECK CONSTRAINT [FK_TestApplication_ToTestEnvironment];

ALTER TABLE [Tests].[TestApplication] WITH CHECK CHECK CONSTRAINT [FK_TestApplication_ToApplication];

ALTER TABLE [Tests].[XCopyTestStep] WITH CHECK CHECK CONSTRAINT [FK_XCopyTestStep_ToTestStep];

ALTER TABLE [Tests].[TestStepParameter] WITH CHECK CHECK CONSTRAINT [FK_TestStepParameter_ToTestStep];


GO
PRINT N'Update complete.';


GO
