//-----------------------------------------------------------------------
// <copyright company="Sherlock">
//     Copyright 2013 Sherlock. Licensed under the Apache License, Version 2.0.
// </copyright>
//-----------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sherlock.Shared.DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    /// <summary>
    /// The context which is used to interact with the Sherlock database.
    /// </summary>
    internal partial class SherlockContext : DbContext
    {
        /// <summary>
        /// Provides access to the data entities for the Sherlock application.
        /// </summary>
        public SherlockContext()
            : base("name=SherlockContext")
        {
            Initialize();
        }
    
        /// <summary>
        /// Initializes the context.
        /// </summary>
        partial void Initialize();
    
        /// <summary>
        /// This method is called when the model for a derived context has been initialized, but
        /// before the model has been locked down and used to initialize the context.  The default
        /// implementation of this method does nothing, but it can be overridden in a derived class
        /// such that the model can be further configured before it is locked down.
        /// </summary>
        /// <remarks>
        /// Typically, this method is called only once when the first instance of a derived context
        /// is created.  The model for that context is then cached and is for all further instances of
        /// the context in the app domain.  This caching can be disabled by setting the ModelCaching
        /// property on the given ModelBuidler, but note that this can seriously degrade performance.
        /// More control over caching is provided through use of the DbModelBuilder and DbContextFactory
        /// classes directly.
        /// </remarks>
        /// <param name="modelBuilder">The builder that defines the model for the context being created.</param>
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        private DbSet<ApplicationDescription> StoredApplicationDescriptions { get; set; }
        private DbSet<MachineDescription> StoredMachineDescriptions { get; set; }
        private DbSet<MachineApplication> StoredMachineApplications { get; set; }
        private DbSet<OperatingSystemDescription> StoredOperatingSystemDescriptions { get; set; }
        private DbSet<Test> StoredTests { get; set; }
        private DbSet<TestApplication> StoredTestApplications { get; set; }
        private DbSet<TestEnvironment> StoredTestEnvironments { get; set; }
        private DbSet<TestStep> StoredTestSteps { get; set; }
        private DbSet<TestStepParameter> StoredTestStepParameters { get; set; }
    
        private int AddApplication(string name, Nullable<int> major, Nullable<int> minor, Nullable<int> patch, Nullable<int> build)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var majorParameter = major.HasValue ?
                new ObjectParameter("major", major) :
                new ObjectParameter("major", typeof(int));
    
            var minorParameter = minor.HasValue ?
                new ObjectParameter("minor", minor) :
                new ObjectParameter("minor", typeof(int));
    
            var patchParameter = patch.HasValue ?
                new ObjectParameter("patch", patch) :
                new ObjectParameter("patch", typeof(int));
    
            var buildParameter = build.HasValue ?
                new ObjectParameter("build", build) :
                new ObjectParameter("build", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddApplication", nameParameter, majorParameter, minorParameter, patchParameter, buildParameter);
        }
    
        private int AddApplicationToMachine(string machineId, Nullable<int> applicationId)
        {
            var machineIdParameter = machineId != null ?
                new ObjectParameter("machineId", machineId) :
                new ObjectParameter("machineId", typeof(string));
    
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("applicationId", applicationId) :
                new ObjectParameter("applicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddApplicationToMachine", machineIdParameter, applicationIdParameter);
        }
    
        private int AddHypervMachine(string machineId, string name, string description, string networkName, string macAddress, Nullable<bool> isAvailableForTesting, Nullable<bool> isActive, Nullable<int> operatingSystemId, string hostId, string image, string snapshotToReturnTo)
        {
            var machineIdParameter = machineId != null ?
                new ObjectParameter("machineId", machineId) :
                new ObjectParameter("machineId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var networkNameParameter = networkName != null ?
                new ObjectParameter("networkName", networkName) :
                new ObjectParameter("networkName", typeof(string));
    
            var macAddressParameter = macAddress != null ?
                new ObjectParameter("macAddress", macAddress) :
                new ObjectParameter("macAddress", typeof(string));
    
            var isAvailableForTestingParameter = isAvailableForTesting.HasValue ?
                new ObjectParameter("isAvailableForTesting", isAvailableForTesting) :
                new ObjectParameter("isAvailableForTesting", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var operatingSystemIdParameter = operatingSystemId.HasValue ?
                new ObjectParameter("operatingSystemId", operatingSystemId) :
                new ObjectParameter("operatingSystemId", typeof(int));
    
            var hostIdParameter = hostId != null ?
                new ObjectParameter("hostId", hostId) :
                new ObjectParameter("hostId", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            var snapshotToReturnToParameter = snapshotToReturnTo != null ?
                new ObjectParameter("snapshotToReturnTo", snapshotToReturnTo) :
                new ObjectParameter("snapshotToReturnTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddHypervMachine", machineIdParameter, nameParameter, descriptionParameter, networkNameParameter, macAddressParameter, isAvailableForTestingParameter, isActiveParameter, operatingSystemIdParameter, hostIdParameter, imageParameter, snapshotToReturnToParameter);
        }
    
        private int AddOperatingSystem(string name, string servicePack, Nullable<int> architecturePointerSize, string culture)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var servicePackParameter = servicePack != null ?
                new ObjectParameter("servicePack", servicePack) :
                new ObjectParameter("servicePack", typeof(string));
    
            var architecturePointerSizeParameter = architecturePointerSize.HasValue ?
                new ObjectParameter("architecturePointerSize", architecturePointerSize) :
                new ObjectParameter("architecturePointerSize", typeof(int));
    
            var cultureParameter = culture != null ?
                new ObjectParameter("culture", culture) :
                new ObjectParameter("culture", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddOperatingSystem", nameParameter, servicePackParameter, architecturePointerSizeParameter, cultureParameter);
        }
    
        private int AddPhysicalMachine(string machineId, string name, string description, string networkName, string macAddress, Nullable<bool> isAvailableForTesting, Nullable<bool> isActive, Nullable<int> operatingSystemId, Nullable<bool> canStartRemotely)
        {
            var machineIdParameter = machineId != null ?
                new ObjectParameter("machineId", machineId) :
                new ObjectParameter("machineId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var networkNameParameter = networkName != null ?
                new ObjectParameter("networkName", networkName) :
                new ObjectParameter("networkName", typeof(string));
    
            var macAddressParameter = macAddress != null ?
                new ObjectParameter("macAddress", macAddress) :
                new ObjectParameter("macAddress", typeof(string));
    
            var isAvailableForTestingParameter = isAvailableForTesting.HasValue ?
                new ObjectParameter("isAvailableForTesting", isAvailableForTesting) :
                new ObjectParameter("isAvailableForTesting", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var operatingSystemIdParameter = operatingSystemId.HasValue ?
                new ObjectParameter("operatingSystemId", operatingSystemId) :
                new ObjectParameter("operatingSystemId", typeof(int));
    
            var canStartRemotelyParameter = canStartRemotely.HasValue ?
                new ObjectParameter("canStartRemotely", canStartRemotely) :
                new ObjectParameter("canStartRemotely", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPhysicalMachine", machineIdParameter, nameParameter, descriptionParameter, networkNameParameter, macAddressParameter, isAvailableForTestingParameter, isActiveParameter, operatingSystemIdParameter, canStartRemotelyParameter);
        }
    
        private int DeleteApplicationById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteApplicationById", idParameter);
        }
    
        private int DeleteApplicationFromMachine(string machineId, Nullable<int> applicationId)
        {
            var machineIdParameter = machineId != null ?
                new ObjectParameter("machineId", machineId) :
                new ObjectParameter("machineId", typeof(string));
    
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("applicationId", applicationId) :
                new ObjectParameter("applicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteApplicationFromMachine", machineIdParameter, applicationIdParameter);
        }
    
        private int DeleteHypervMachineById(string machineId)
        {
            var machineIdParameter = machineId != null ?
                new ObjectParameter("machineId", machineId) :
                new ObjectParameter("machineId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteHypervMachineById", machineIdParameter);
        }
    
        private int DeleteOperatingSystemById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteOperatingSystemById", idParameter);
        }
    
        private int DeletePhysicalMachineById(string machineId)
        {
            var machineIdParameter = machineId != null ?
                new ObjectParameter("machineId", machineId) :
                new ObjectParameter("machineId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePhysicalMachineById", machineIdParameter);
        }
    
        private ObjectResult<HypervMachineDescription> GetHypervMachines(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HypervMachineDescription>("GetHypervMachines", idParameter);
        }
    
        private ObjectResult<HypervMachineDescription> GetHypervMachines(string id, MergeOption mergeOption)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HypervMachineDescription>("GetHypervMachines", mergeOption, idParameter);
        }
    
        private ObjectResult<PhysicalMachineDescription> GetPhysicalMachines(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PhysicalMachineDescription>("GetPhysicalMachines", idParameter);
        }
    
        private ObjectResult<PhysicalMachineDescription> GetPhysicalMachines(string id, MergeOption mergeOption)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PhysicalMachineDescription>("GetPhysicalMachines", mergeOption, idParameter);
        }
    
        private int UpdateApplication(Nullable<int> id, string name, Nullable<int> major, Nullable<int> minor, Nullable<int> patch, Nullable<int> build)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var majorParameter = major.HasValue ?
                new ObjectParameter("major", major) :
                new ObjectParameter("major", typeof(int));
    
            var minorParameter = minor.HasValue ?
                new ObjectParameter("minor", minor) :
                new ObjectParameter("minor", typeof(int));
    
            var patchParameter = patch.HasValue ?
                new ObjectParameter("patch", patch) :
                new ObjectParameter("patch", typeof(int));
    
            var buildParameter = build.HasValue ?
                new ObjectParameter("build", build) :
                new ObjectParameter("build", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateApplication", idParameter, nameParameter, majorParameter, minorParameter, patchParameter, buildParameter);
        }
    
        private int UpdateHypervMachine(string machineId, string name, string description, string networkName, string macAddress, Nullable<bool> isAvailableForTesting, Nullable<bool> isActive, Nullable<int> operatingSystemId, string hostId, string image, string snapshotToReturnTo)
        {
            var machineIdParameter = machineId != null ?
                new ObjectParameter("machineId", machineId) :
                new ObjectParameter("machineId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var networkNameParameter = networkName != null ?
                new ObjectParameter("networkName", networkName) :
                new ObjectParameter("networkName", typeof(string));
    
            var macAddressParameter = macAddress != null ?
                new ObjectParameter("macAddress", macAddress) :
                new ObjectParameter("macAddress", typeof(string));
    
            var isAvailableForTestingParameter = isAvailableForTesting.HasValue ?
                new ObjectParameter("isAvailableForTesting", isAvailableForTesting) :
                new ObjectParameter("isAvailableForTesting", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var operatingSystemIdParameter = operatingSystemId.HasValue ?
                new ObjectParameter("operatingSystemId", operatingSystemId) :
                new ObjectParameter("operatingSystemId", typeof(int));
    
            var hostIdParameter = hostId != null ?
                new ObjectParameter("hostId", hostId) :
                new ObjectParameter("hostId", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            var snapshotToReturnToParameter = snapshotToReturnTo != null ?
                new ObjectParameter("snapshotToReturnTo", snapshotToReturnTo) :
                new ObjectParameter("snapshotToReturnTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateHypervMachine", machineIdParameter, nameParameter, descriptionParameter, networkNameParameter, macAddressParameter, isAvailableForTestingParameter, isActiveParameter, operatingSystemIdParameter, hostIdParameter, imageParameter, snapshotToReturnToParameter);
        }
    
        private int UpdateOperatingSystem(Nullable<int> id, string name, string servicePack, Nullable<int> architecturePointerSize, string culture)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var servicePackParameter = servicePack != null ?
                new ObjectParameter("servicePack", servicePack) :
                new ObjectParameter("servicePack", typeof(string));
    
            var architecturePointerSizeParameter = architecturePointerSize.HasValue ?
                new ObjectParameter("architecturePointerSize", architecturePointerSize) :
                new ObjectParameter("architecturePointerSize", typeof(int));
    
            var cultureParameter = culture != null ?
                new ObjectParameter("culture", culture) :
                new ObjectParameter("culture", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOperatingSystem", idParameter, nameParameter, servicePackParameter, architecturePointerSizeParameter, cultureParameter);
        }
    
        private int UpdatePhysicalMachine(string machineId, string name, string description, string networkName, string macAddress, Nullable<bool> isAvailableForTesting, Nullable<bool> isActive, Nullable<int> operatingSystemId, Nullable<bool> canStartRemotely)
        {
            var machineIdParameter = machineId != null ?
                new ObjectParameter("machineId", machineId) :
                new ObjectParameter("machineId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var networkNameParameter = networkName != null ?
                new ObjectParameter("networkName", networkName) :
                new ObjectParameter("networkName", typeof(string));
    
            var macAddressParameter = macAddress != null ?
                new ObjectParameter("macAddress", macAddress) :
                new ObjectParameter("macAddress", typeof(string));
    
            var isAvailableForTestingParameter = isAvailableForTesting.HasValue ?
                new ObjectParameter("isAvailableForTesting", isAvailableForTesting) :
                new ObjectParameter("isAvailableForTesting", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var operatingSystemIdParameter = operatingSystemId.HasValue ?
                new ObjectParameter("operatingSystemId", operatingSystemId) :
                new ObjectParameter("operatingSystemId", typeof(int));
    
            var canStartRemotelyParameter = canStartRemotely.HasValue ?
                new ObjectParameter("canStartRemotely", canStartRemotely) :
                new ObjectParameter("canStartRemotely", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePhysicalMachine", machineIdParameter, nameParameter, descriptionParameter, networkNameParameter, macAddressParameter, isAvailableForTestingParameter, isActiveParameter, operatingSystemIdParameter, canStartRemotelyParameter);
        }
    
        private ObjectResult<int?> GetSchemaVersion()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<int?>("GetSchemaVersion");
        }
    
        private int SwitchMachineToActive(string machineId)
        {
            var machineIdParameter = machineId != null ?
                new ObjectParameter("machineId", machineId) :
                new ObjectParameter("machineId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SwitchMachineToActive", machineIdParameter);
        }
    
        private int SwitchMachineToInactive(string machineId)
        {
            var machineIdParameter = machineId != null ?
                new ObjectParameter("machineId", machineId) :
                new ObjectParameter("machineId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SwitchMachineToInactive", machineIdParameter);
        }
    
        private ObjectResult<bool?> IsHypervMachine(string machineId)
        {
            var machineIdParameter = machineId != null ?
                new ObjectParameter("machineId", machineId) :
                new ObjectParameter("machineId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<bool?>("IsHypervMachine", machineIdParameter);
        }
    
        private ObjectResult<bool?> IsPhysicalMachine(string machineId)
        {
            var machineIdParameter = machineId != null ?
                new ObjectParameter("machineId", machineId) :
                new ObjectParameter("machineId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<bool?>("IsPhysicalMachine", machineIdParameter);
        }
    
        private ObjectResult<ApplicationDescription> GetApplicationsById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ApplicationDescription>("GetApplicationsById", idParameter);
        }
    
        private ObjectResult<ApplicationDescription> GetApplicationsById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ApplicationDescription>("GetApplicationsById", mergeOption, idParameter);
        }
    
        private ObjectResult<ApplicationDescription> GetApplicationsByName(string name, Nullable<int> versionMajor, Nullable<int> versionMinor, Nullable<int> versionPatch, Nullable<int> versionBuild)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var versionMajorParameter = versionMajor.HasValue ?
                new ObjectParameter("versionMajor", versionMajor) :
                new ObjectParameter("versionMajor", typeof(int));
    
            var versionMinorParameter = versionMinor.HasValue ?
                new ObjectParameter("versionMinor", versionMinor) :
                new ObjectParameter("versionMinor", typeof(int));
    
            var versionPatchParameter = versionPatch.HasValue ?
                new ObjectParameter("versionPatch", versionPatch) :
                new ObjectParameter("versionPatch", typeof(int));
    
            var versionBuildParameter = versionBuild.HasValue ?
                new ObjectParameter("versionBuild", versionBuild) :
                new ObjectParameter("versionBuild", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ApplicationDescription>("GetApplicationsByName", nameParameter, versionMajorParameter, versionMinorParameter, versionPatchParameter, versionBuildParameter);
        }
    
        private ObjectResult<ApplicationDescription> GetApplicationsByName(string name, Nullable<int> versionMajor, Nullable<int> versionMinor, Nullable<int> versionPatch, Nullable<int> versionBuild, MergeOption mergeOption)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var versionMajorParameter = versionMajor.HasValue ?
                new ObjectParameter("versionMajor", versionMajor) :
                new ObjectParameter("versionMajor", typeof(int));
    
            var versionMinorParameter = versionMinor.HasValue ?
                new ObjectParameter("versionMinor", versionMinor) :
                new ObjectParameter("versionMinor", typeof(int));
    
            var versionPatchParameter = versionPatch.HasValue ?
                new ObjectParameter("versionPatch", versionPatch) :
                new ObjectParameter("versionPatch", typeof(int));
    
            var versionBuildParameter = versionBuild.HasValue ?
                new ObjectParameter("versionBuild", versionBuild) :
                new ObjectParameter("versionBuild", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ApplicationDescription>("GetApplicationsByName", mergeOption, nameParameter, versionMajorParameter, versionMinorParameter, versionPatchParameter, versionBuildParameter);
        }
    
        private ObjectResult<OperatingSystemDescription> GetOperatingSystemsById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OperatingSystemDescription>("GetOperatingSystemsById", idParameter);
        }
    
        private ObjectResult<OperatingSystemDescription> GetOperatingSystemsById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OperatingSystemDescription>("GetOperatingSystemsById", mergeOption, idParameter);
        }
    
        private ObjectResult<OperatingSystemDescription> GetOperatingSystemsByName(string name, string servicePack, Nullable<int> architecturePointerSize, string culture)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var servicePackParameter = servicePack != null ?
                new ObjectParameter("servicePack", servicePack) :
                new ObjectParameter("servicePack", typeof(string));
    
            var architecturePointerSizeParameter = architecturePointerSize.HasValue ?
                new ObjectParameter("architecturePointerSize", architecturePointerSize) :
                new ObjectParameter("architecturePointerSize", typeof(int));
    
            var cultureParameter = culture != null ?
                new ObjectParameter("culture", culture) :
                new ObjectParameter("culture", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OperatingSystemDescription>("GetOperatingSystemsByName", nameParameter, servicePackParameter, architecturePointerSizeParameter, cultureParameter);
        }
    
        private ObjectResult<OperatingSystemDescription> GetOperatingSystemsByName(string name, string servicePack, Nullable<int> architecturePointerSize, string culture, MergeOption mergeOption)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var servicePackParameter = servicePack != null ?
                new ObjectParameter("servicePack", servicePack) :
                new ObjectParameter("servicePack", typeof(string));
    
            var architecturePointerSizeParameter = architecturePointerSize.HasValue ?
                new ObjectParameter("architecturePointerSize", architecturePointerSize) :
                new ObjectParameter("architecturePointerSize", typeof(int));
    
            var cultureParameter = culture != null ?
                new ObjectParameter("culture", culture) :
                new ObjectParameter("culture", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OperatingSystemDescription>("GetOperatingSystemsByName", mergeOption, nameParameter, servicePackParameter, architecturePointerSizeParameter, cultureParameter);
        }
    
        private ObjectResult<MachineApplication> GetMachineApplications(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MachineApplication>("GetMachineApplications", idParameter);
        }
    
        private ObjectResult<MachineApplication> GetMachineApplications(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MachineApplication>("GetMachineApplications", mergeOption, idParameter);
        }
    
        private ObjectResult<MachineApplication> GetMachineApplicationByApplicationId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MachineApplication>("GetMachineApplicationByApplicationId", idParameter);
        }
    
        private ObjectResult<MachineApplication> GetMachineApplicationByApplicationId(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MachineApplication>("GetMachineApplicationByApplicationId", mergeOption, idParameter);
        }
    
        private ObjectResult<MachineApplication> GetMachineApplicationByMachineId(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MachineApplication>("GetMachineApplicationByMachineId", idParameter);
        }
    
        private ObjectResult<MachineApplication> GetMachineApplicationByMachineId(string id, MergeOption mergeOption)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MachineApplication>("GetMachineApplicationByMachineId", mergeOption, idParameter);
        }
    
        private ObjectResult<HypervMachineDescription> GetHypervMachinesByHostId(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HypervMachineDescription>("GetHypervMachinesByHostId", idParameter);
        }
    
        private ObjectResult<HypervMachineDescription> GetHypervMachinesByHostId(string id, MergeOption mergeOption)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HypervMachineDescription>("GetHypervMachinesByHostId", mergeOption, idParameter);
        }
    
        private ObjectResult<int?> AddApplicationToTestEnvironment(Nullable<int> testEnvironmentId, Nullable<int> applicationId)
        {
            var testEnvironmentIdParameter = testEnvironmentId.HasValue ?
                new ObjectParameter("testEnvironmentId", testEnvironmentId) :
                new ObjectParameter("testEnvironmentId", typeof(int));
    
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("applicationId", applicationId) :
                new ObjectParameter("applicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<int?>("AddApplicationToTestEnvironment", testEnvironmentIdParameter, applicationIdParameter);
        }
    
        private ObjectResult<int?> AddMsiInstallTestStep(Nullable<int> testEnvironmentId, Nullable<int> order, string onFailure)
        {
            var testEnvironmentIdParameter = testEnvironmentId.HasValue ?
                new ObjectParameter("testEnvironmentId", testEnvironmentId) :
                new ObjectParameter("testEnvironmentId", typeof(int));
    
            var orderParameter = order.HasValue ?
                new ObjectParameter("order", order) :
                new ObjectParameter("order", typeof(int));
    
            var onFailureParameter = onFailure != null ?
                new ObjectParameter("onFailure", onFailure) :
                new ObjectParameter("onFailure", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<int?>("AddMsiInstallTestStep", testEnvironmentIdParameter, orderParameter, onFailureParameter);
        }
    
        private ObjectResult<int?> AddScriptExecuteTestStep(Nullable<int> testEnvironmentId, Nullable<int> order, string onFailure, string language)
        {
            var testEnvironmentIdParameter = testEnvironmentId.HasValue ?
                new ObjectParameter("testEnvironmentId", testEnvironmentId) :
                new ObjectParameter("testEnvironmentId", typeof(int));
    
            var orderParameter = order.HasValue ?
                new ObjectParameter("order", order) :
                new ObjectParameter("order", typeof(int));
    
            var onFailureParameter = onFailure != null ?
                new ObjectParameter("onFailure", onFailure) :
                new ObjectParameter("onFailure", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("language", language) :
                new ObjectParameter("language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<int?>("AddScriptExecuteTestStep", testEnvironmentIdParameter, orderParameter, onFailureParameter, languageParameter);
        }
    
        private ObjectResult<int?> AddTest(string productName, string productVersion, string owner, string description, string reportPath)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var productVersionParameter = productVersion != null ?
                new ObjectParameter("productVersion", productVersion) :
                new ObjectParameter("productVersion", typeof(string));
    
            var ownerParameter = owner != null ?
                new ObjectParameter("owner", owner) :
                new ObjectParameter("owner", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var reportPathParameter = reportPath != null ?
                new ObjectParameter("reportPath", reportPath) :
                new ObjectParameter("reportPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<int?>("AddTest", productNameParameter, productVersionParameter, ownerParameter, descriptionParameter, reportPathParameter);
        }
    
        private ObjectResult<int?> AddTestEnvironment(Nullable<int> testId, Nullable<int> desiredOperatingSystemId, string name)
        {
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("testId", testId) :
                new ObjectParameter("testId", typeof(int));
    
            var desiredOperatingSystemIdParameter = desiredOperatingSystemId.HasValue ?
                new ObjectParameter("desiredOperatingSystemId", desiredOperatingSystemId) :
                new ObjectParameter("desiredOperatingSystemId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<int?>("AddTestEnvironment", testIdParameter, desiredOperatingSystemIdParameter, nameParameter);
        }
    
        private ObjectResult<int?> AddTestStepParameter(Nullable<int> testStepId, string key, string value)
        {
            var testStepIdParameter = testStepId.HasValue ?
                new ObjectParameter("testStepId", testStepId) :
                new ObjectParameter("testStepId", typeof(int));
    
            var keyParameter = key != null ?
                new ObjectParameter("key", key) :
                new ObjectParameter("key", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<int?>("AddTestStepParameter", testStepIdParameter, keyParameter, valueParameter);
        }
    
        private ObjectResult<int?> AddXCopyTestStep(Nullable<int> testEnvironmentId, Nullable<int> order, string onFailure, string destination)
        {
            var testEnvironmentIdParameter = testEnvironmentId.HasValue ?
                new ObjectParameter("testEnvironmentId", testEnvironmentId) :
                new ObjectParameter("testEnvironmentId", typeof(int));
    
            var orderParameter = order.HasValue ?
                new ObjectParameter("order", order) :
                new ObjectParameter("order", typeof(int));
    
            var onFailureParameter = onFailure != null ?
                new ObjectParameter("onFailure", onFailure) :
                new ObjectParameter("onFailure", typeof(string));
    
            var destinationParameter = destination != null ?
                new ObjectParameter("destination", destination) :
                new ObjectParameter("destination", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<int?>("AddXCopyTestStep", testEnvironmentIdParameter, orderParameter, onFailureParameter, destinationParameter);
        }
    
        private int DeleteApplicationFromTestEnvironment(Nullable<int> testEnvironmentId, Nullable<int> applicationId)
        {
            var testEnvironmentIdParameter = testEnvironmentId.HasValue ?
                new ObjectParameter("testEnvironmentId", testEnvironmentId) :
                new ObjectParameter("testEnvironmentId", typeof(int));
    
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("applicationId", applicationId) :
                new ObjectParameter("applicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteApplicationFromTestEnvironment", testEnvironmentIdParameter, applicationIdParameter);
        }
    
        private int DeleteMsiInstallTestStepById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMsiInstallTestStepById", idParameter);
        }
    
        private int DeleteScriptExecuteTestStepById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteScriptExecuteTestStepById", idParameter);
        }
    
        private int DeleteTestById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTestById", idParameter);
        }
    
        private int DeleteTestEnvironmentById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTestEnvironmentById", idParameter);
        }
    
        private int DeleteTestStepParameterById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTestStepParameterById", idParameter);
        }
    
        private int DeleteXCopyTestStepById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteXCopyTestStepById", idParameter);
        }
    
        private ObjectResult<MsiInstallTestStep> GetMsiInstallTestStepsById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MsiInstallTestStep>("GetMsiInstallTestStepsById", idParameter);
        }
    
        private ObjectResult<MsiInstallTestStep> GetMsiInstallTestStepsById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MsiInstallTestStep>("GetMsiInstallTestStepsById", mergeOption, idParameter);
        }
    
        private ObjectResult<ScriptExecuteTestStep> GetScriptExecuteTestStepsById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ScriptExecuteTestStep>("GetScriptExecuteTestStepsById", idParameter);
        }
    
        private ObjectResult<ScriptExecuteTestStep> GetScriptExecuteTestStepsById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ScriptExecuteTestStep>("GetScriptExecuteTestStepsById", mergeOption, idParameter);
        }
    
        private ObjectResult<TestEnvironment> GetTestEnvironmentsById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TestEnvironment>("GetTestEnvironmentsById", idParameter);
        }
    
        private ObjectResult<TestEnvironment> GetTestEnvironmentsById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TestEnvironment>("GetTestEnvironmentsById", mergeOption, idParameter);
        }
    
        private ObjectResult<Test> GetTestsById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Test>("GetTestsById", idParameter);
        }
    
        private ObjectResult<Test> GetTestsById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Test>("GetTestsById", mergeOption, idParameter);
        }
    
        private ObjectResult<TestStepParameter> GetTestStepParametersById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TestStepParameter>("GetTestStepParametersById", idParameter);
        }
    
        private ObjectResult<TestStepParameter> GetTestStepParametersById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TestStepParameter>("GetTestStepParametersById", mergeOption, idParameter);
        }
    
        private ObjectResult<XCopyTestStep> GetXCopyTestStepsById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<XCopyTestStep>("GetXCopyTestStepsById", idParameter);
        }
    
        private ObjectResult<XCopyTestStep> GetXCopyTestStepsById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<XCopyTestStep>("GetXCopyTestStepsById", mergeOption, idParameter);
        }
    
        private int UpdateMsiInstallTestStep(Nullable<int> id, Nullable<int> testEnvironmentId, Nullable<int> order, string onFailure)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var testEnvironmentIdParameter = testEnvironmentId.HasValue ?
                new ObjectParameter("testEnvironmentId", testEnvironmentId) :
                new ObjectParameter("testEnvironmentId", typeof(int));
    
            var orderParameter = order.HasValue ?
                new ObjectParameter("order", order) :
                new ObjectParameter("order", typeof(int));
    
            var onFailureParameter = onFailure != null ?
                new ObjectParameter("onFailure", onFailure) :
                new ObjectParameter("onFailure", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMsiInstallTestStep", idParameter, testEnvironmentIdParameter, orderParameter, onFailureParameter);
        }
    
        private int UpdateScriptExecuteTestStep(Nullable<int> id, Nullable<int> testEnvironmentId, Nullable<int> order, string onFailure, string language)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var testEnvironmentIdParameter = testEnvironmentId.HasValue ?
                new ObjectParameter("testEnvironmentId", testEnvironmentId) :
                new ObjectParameter("testEnvironmentId", typeof(int));
    
            var orderParameter = order.HasValue ?
                new ObjectParameter("order", order) :
                new ObjectParameter("order", typeof(int));
    
            var onFailureParameter = onFailure != null ?
                new ObjectParameter("onFailure", onFailure) :
                new ObjectParameter("onFailure", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("language", language) :
                new ObjectParameter("language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateScriptExecuteTestStep", idParameter, testEnvironmentIdParameter, orderParameter, onFailureParameter, languageParameter);
        }
    
        private int UpdateTest(Nullable<int> id, string productName, string productVersion, string owner, string description, string reportPath)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var productVersionParameter = productVersion != null ?
                new ObjectParameter("productVersion", productVersion) :
                new ObjectParameter("productVersion", typeof(string));
    
            var ownerParameter = owner != null ?
                new ObjectParameter("owner", owner) :
                new ObjectParameter("owner", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var reportPathParameter = reportPath != null ?
                new ObjectParameter("reportPath", reportPath) :
                new ObjectParameter("reportPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTest", idParameter, productNameParameter, productVersionParameter, ownerParameter, descriptionParameter, reportPathParameter);
        }
    
        private int UpdateTestEnvironment(Nullable<int> id, Nullable<int> testId, Nullable<int> desiredOperatingSystemId, string name)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("testId", testId) :
                new ObjectParameter("testId", typeof(int));
    
            var desiredOperatingSystemIdParameter = desiredOperatingSystemId.HasValue ?
                new ObjectParameter("desiredOperatingSystemId", desiredOperatingSystemId) :
                new ObjectParameter("desiredOperatingSystemId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTestEnvironment", idParameter, testIdParameter, desiredOperatingSystemIdParameter, nameParameter);
        }
    
        private int UpdateTestStepParameter(Nullable<int> id, Nullable<int> testStepId, string key, string value)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var testStepIdParameter = testStepId.HasValue ?
                new ObjectParameter("testStepId", testStepId) :
                new ObjectParameter("testStepId", typeof(int));
    
            var keyParameter = key != null ?
                new ObjectParameter("key", key) :
                new ObjectParameter("key", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTestStepParameter", idParameter, testStepIdParameter, keyParameter, valueParameter);
        }
    
        private int UpdateXCopyTestStep(Nullable<int> id, Nullable<int> testEnvironmentId, Nullable<int> order, string onFailure, string destination)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var testEnvironmentIdParameter = testEnvironmentId.HasValue ?
                new ObjectParameter("testEnvironmentId", testEnvironmentId) :
                new ObjectParameter("testEnvironmentId", typeof(int));
    
            var orderParameter = order.HasValue ?
                new ObjectParameter("order", order) :
                new ObjectParameter("order", typeof(int));
    
            var onFailureParameter = onFailure != null ?
                new ObjectParameter("onFailure", onFailure) :
                new ObjectParameter("onFailure", typeof(string));
    
            var destinationParameter = destination != null ?
                new ObjectParameter("destination", destination) :
                new ObjectParameter("destination", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateXCopyTestStep", idParameter, testEnvironmentIdParameter, orderParameter, onFailureParameter, destinationParameter);
        }
    
        private ObjectResult<TestEnvironment> GetTestEnvironmentByMachineId(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TestEnvironment>("GetTestEnvironmentByMachineId", idParameter);
        }
    
        private ObjectResult<TestEnvironment> GetTestEnvironmentByMachineId(string id, MergeOption mergeOption)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TestEnvironment>("GetTestEnvironmentByMachineId", mergeOption, idParameter);
        }
    
        private ObjectResult<string> GetMachinesByApplicationId(Nullable<int> applicationId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("applicationId", applicationId) :
                new ObjectParameter("applicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetMachinesByApplicationId", applicationIdParameter);
        }
    
        private ObjectResult<string> GetMachinesByOperatingSystemId(Nullable<int> operatingSystemId)
        {
            var operatingSystemIdParameter = operatingSystemId.HasValue ?
                new ObjectParameter("operatingSystemId", operatingSystemId) :
                new ObjectParameter("operatingSystemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetMachinesByOperatingSystemId", operatingSystemIdParameter);
        }
    
        private ObjectResult<TestApplication> GetTestApplicationsById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TestApplication>("GetTestApplicationsById", idParameter);
        }
    
        private ObjectResult<TestApplication> GetTestApplicationsById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TestApplication>("GetTestApplicationsById", mergeOption, idParameter);
        }
    
        private ObjectResult<int?> GetTestApplicationsByTestEnvironmentId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<int?>("GetTestApplicationsByTestEnvironmentId", idParameter);
        }
    
        private ObjectResult<int?> GetTestEnvironmentsByTestId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<int?>("GetTestEnvironmentsByTestId", idParameter);
        }
    
        private ObjectResult<int?> GetTestStepParametersByTestStepId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<int?>("GetTestStepParametersByTestStepId", idParameter);
        }
    
        private ObjectResult<int?> GetTestStepsByTestEnvironmentId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<int?>("GetTestStepsByTestEnvironmentId", idParameter);
        }
    
        private ObjectResult<int?> GetTestApplicationsByApplicationId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<int?>("GetTestApplicationsByApplicationId", idParameter);
        }
    
        private ObjectResult<int?> GetTestEnvironmentByOperatingSystemId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<int?>("GetTestEnvironmentByOperatingSystemId", idParameter);
        }
    
        private int AttachMachineToTestEnvironment(Nullable<int> environment, string machine)
        {
            var environmentParameter = environment.HasValue ?
                new ObjectParameter("environment", environment) :
                new ObjectParameter("environment", typeof(int));
    
            var machineParameter = machine != null ?
                new ObjectParameter("machine", machine) :
                new ObjectParameter("machine", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AttachMachineToTestEnvironment", environmentParameter, machineParameter);
        }
    
        private ObjectResult<Test> GetNotExecutedTests()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Test>("GetNotExecutedTests");
        }
    
        private ObjectResult<Test> GetNotExecutedTests(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Test>("GetNotExecutedTests", mergeOption);
        }
    
        private int MarkTestAsEnded(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MarkTestAsEnded", idParameter);
        }
    
        private int MarkTestAsStarted(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MarkTestAsStarted", idParameter);
        }
    
        private int MarkTestAsReadyForExecution(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MarkTestAsReadyForExecution", idParameter);
        }
    
        private ObjectResult<int?> AddConsoleExecuteTestStep(Nullable<int> testEnvironmentId, Nullable<int> order, string onFailure, string executableFilePath)
        {
            var testEnvironmentIdParameter = testEnvironmentId.HasValue ?
                new ObjectParameter("testEnvironmentId", testEnvironmentId) :
                new ObjectParameter("testEnvironmentId", typeof(int));
    
            var orderParameter = order.HasValue ?
                new ObjectParameter("order", order) :
                new ObjectParameter("order", typeof(int));
    
            var onFailureParameter = onFailure != null ?
                new ObjectParameter("onFailure", onFailure) :
                new ObjectParameter("onFailure", typeof(string));
    
            var executableFilePathParameter = executableFilePath != null ?
                new ObjectParameter("executableFilePath", executableFilePath) :
                new ObjectParameter("executableFilePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<int?>("AddConsoleExecuteTestStep", testEnvironmentIdParameter, orderParameter, onFailureParameter, executableFilePathParameter);
        }
    
        private int DeleteConsoleExecuteTestStepById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteConsoleExecuteTestStepById", idParameter);
        }
    
        private ObjectResult<ConsoleExecuteTestStep> GetConsoleExecuteTestStepsById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsoleExecuteTestStep>("GetConsoleExecuteTestStepsById", idParameter);
        }
    
        private ObjectResult<ConsoleExecuteTestStep> GetConsoleExecuteTestStepsById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsoleExecuteTestStep>("GetConsoleExecuteTestStepsById", mergeOption, idParameter);
        }
    
        private int UpdateConsoleExecuteTestStep(Nullable<int> id, Nullable<int> testEnvironmentId, Nullable<int> order, string onFailure, string executableFilePath)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var testEnvironmentIdParameter = testEnvironmentId.HasValue ?
                new ObjectParameter("testEnvironmentId", testEnvironmentId) :
                new ObjectParameter("testEnvironmentId", typeof(int));
    
            var orderParameter = order.HasValue ?
                new ObjectParameter("order", order) :
                new ObjectParameter("order", typeof(int));
    
            var onFailureParameter = onFailure != null ?
                new ObjectParameter("onFailure", onFailure) :
                new ObjectParameter("onFailure", typeof(string));
    
            var executableFilePathParameter = executableFilePath != null ?
                new ObjectParameter("executableFilePath", executableFilePath) :
                new ObjectParameter("executableFilePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateConsoleExecuteTestStep", idParameter, testEnvironmentIdParameter, orderParameter, onFailureParameter, executableFilePathParameter);
        }
    }
}
